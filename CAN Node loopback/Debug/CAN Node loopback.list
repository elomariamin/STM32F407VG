
CAN Node loopback.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001350  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080014d8  080014e0  000114e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  080014d8  080014d8  000114d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080014dc  080014dc  000114dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000000  20000000  20000000  000114e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  000114e0  2**0
                  CONTENTS
  7 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  2000001c  2000001c  00020000  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000114e0  2**0
                  CONTENTS, READONLY
 10 .debug_info   00003d3c  00000000  00000000  00011510  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00000dfa  00000000  00000000  0001524c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000004d0  00000000  00000000  00016048  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000438  00000000  00000000  00016518  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00001d6a  00000000  00000000  00016950  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00001d07  00000000  00000000  000186ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0001a3c1  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000012fc  00000000  00000000  0001a440  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  0001b73c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080014c0 	.word	0x080014c0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	080014c0 	.word	0x080014c0

080001c8 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 80001d0:	2300      	movs	r3, #0
 80001d2:	73fb      	strb	r3, [r7, #15]
 80001d4:	2300      	movs	r3, #0
 80001d6:	73bb      	strb	r3, [r7, #14]
 80001d8:	230f      	movs	r3, #15
 80001da:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 80001dc:	687b      	ldr	r3, [r7, #4]
 80001de:	78db      	ldrb	r3, [r3, #3]
 80001e0:	2b00      	cmp	r3, #0
 80001e2:	d039      	beq.n	8000258 <NVIC_Init+0x90>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 80001e4:	4b27      	ldr	r3, [pc, #156]	; (8000284 <NVIC_Init+0xbc>)
 80001e6:	68db      	ldr	r3, [r3, #12]
 80001e8:	43db      	mvns	r3, r3
 80001ea:	0a1b      	lsrs	r3, r3, #8
 80001ec:	b2db      	uxtb	r3, r3
 80001ee:	f003 0307 	and.w	r3, r3, #7
 80001f2:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 80001f4:	7bfb      	ldrb	r3, [r7, #15]
 80001f6:	f1c3 0304 	rsb	r3, r3, #4
 80001fa:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 80001fc:	7b7a      	ldrb	r2, [r7, #13]
 80001fe:	7bfb      	ldrb	r3, [r7, #15]
 8000200:	fa42 f303 	asr.w	r3, r2, r3
 8000204:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	785b      	ldrb	r3, [r3, #1]
 800020a:	461a      	mov	r2, r3
 800020c:	7bbb      	ldrb	r3, [r7, #14]
 800020e:	fa02 f303 	lsl.w	r3, r2, r3
 8000212:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	789a      	ldrb	r2, [r3, #2]
 8000218:	7b7b      	ldrb	r3, [r7, #13]
 800021a:	4013      	ands	r3, r2
 800021c:	b2da      	uxtb	r2, r3
 800021e:	7bfb      	ldrb	r3, [r7, #15]
 8000220:	4313      	orrs	r3, r2
 8000222:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 8000224:	7bfb      	ldrb	r3, [r7, #15]
 8000226:	011b      	lsls	r3, r3, #4
 8000228:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 800022a:	4a17      	ldr	r2, [pc, #92]	; (8000288 <NVIC_Init+0xc0>)
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	781b      	ldrb	r3, [r3, #0]
 8000230:	4413      	add	r3, r2
 8000232:	7bfa      	ldrb	r2, [r7, #15]
 8000234:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000238:	4a13      	ldr	r2, [pc, #76]	; (8000288 <NVIC_Init+0xc0>)
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	781b      	ldrb	r3, [r3, #0]
 800023e:	095b      	lsrs	r3, r3, #5
 8000240:	b2db      	uxtb	r3, r3
 8000242:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	781b      	ldrb	r3, [r3, #0]
 8000248:	f003 031f 	and.w	r3, r3, #31
 800024c:	2101      	movs	r1, #1
 800024e:	fa01 f303 	lsl.w	r3, r1, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000252:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000256:	e00f      	b.n	8000278 <NVIC_Init+0xb0>
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000258:	490b      	ldr	r1, [pc, #44]	; (8000288 <NVIC_Init+0xc0>)
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	781b      	ldrb	r3, [r3, #0]
 800025e:	095b      	lsrs	r3, r3, #5
 8000260:	b2db      	uxtb	r3, r3
 8000262:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	781b      	ldrb	r3, [r3, #0]
 8000268:	f003 031f 	and.w	r3, r3, #31
 800026c:	2201      	movs	r2, #1
 800026e:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000270:	f100 0320 	add.w	r3, r0, #32
 8000274:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000278:	bf00      	nop
 800027a:	3714      	adds	r7, #20
 800027c:	46bd      	mov	sp, r7
 800027e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000282:	4770      	bx	lr
 8000284:	e000ed00 	.word	0xe000ed00
 8000288:	e000e100 	.word	0xe000e100

0800028c <CAN_Init>:
  *         the configuration information for the CAN peripheral.
  * @retval Constant indicates initialization succeed which will be 
  *         CAN_InitStatus_Failed or CAN_InitStatus_Success.
  */
uint8_t CAN_Init(CAN_TypeDef* CANx, CAN_InitTypeDef* CAN_InitStruct)
{
 800028c:	b480      	push	{r7}
 800028e:	b085      	sub	sp, #20
 8000290:	af00      	add	r7, sp, #0
 8000292:	6078      	str	r0, [r7, #4]
 8000294:	6039      	str	r1, [r7, #0]
  uint8_t InitStatus = CAN_InitStatus_Failed;
 8000296:	2300      	movs	r3, #0
 8000298:	73fb      	strb	r3, [r7, #15]
  uint32_t wait_ack = 0x00000000;
 800029a:	2300      	movs	r3, #0
 800029c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_CAN_BS1(CAN_InitStruct->CAN_BS1));
  assert_param(IS_CAN_BS2(CAN_InitStruct->CAN_BS2));
  assert_param(IS_CAN_PRESCALER(CAN_InitStruct->CAN_Prescaler));

  /* Exit from sleep mode */
  CANx->MCR &= (~(uint32_t)CAN_MCR_SLEEP);
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	f023 0202 	bic.w	r2, r3, #2
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	601a      	str	r2, [r3, #0]

  /* Request initialisation */
  CANx->MCR |= CAN_MCR_INRQ ;
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	681b      	ldr	r3, [r3, #0]
 80002ae:	f043 0201 	orr.w	r2, r3, #1
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	601a      	str	r2, [r3, #0]

  /* Wait the acknowledge */
  while (((CANx->MSR & CAN_MSR_INAK) != CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
 80002b6:	e002      	b.n	80002be <CAN_Init+0x32>
  {
    wait_ack++;
 80002b8:	68bb      	ldr	r3, [r7, #8]
 80002ba:	3301      	adds	r3, #1
 80002bc:	60bb      	str	r3, [r7, #8]
  while (((CANx->MSR & CAN_MSR_INAK) != CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	685b      	ldr	r3, [r3, #4]
 80002c2:	f003 0301 	and.w	r3, r3, #1
 80002c6:	2b01      	cmp	r3, #1
 80002c8:	d004      	beq.n	80002d4 <CAN_Init+0x48>
 80002ca:	68bb      	ldr	r3, [r7, #8]
 80002cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80002d0:	4293      	cmp	r3, r2
 80002d2:	d1f1      	bne.n	80002b8 <CAN_Init+0x2c>
  }

  /* Check acknowledge */
  if ((CANx->MSR & CAN_MSR_INAK) != CAN_MSR_INAK)
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	685b      	ldr	r3, [r3, #4]
 80002d8:	f003 0301 	and.w	r3, r3, #1
 80002dc:	2b01      	cmp	r3, #1
 80002de:	d002      	beq.n	80002e6 <CAN_Init+0x5a>
  {
    InitStatus = CAN_InitStatus_Failed;
 80002e0:	2300      	movs	r3, #0
 80002e2:	73fb      	strb	r3, [r7, #15]
 80002e4:	e09c      	b.n	8000420 <CAN_Init+0x194>
  }
  else 
  {
    /* Set the time triggered communication mode */
    if (CAN_InitStruct->CAN_TTCM == ENABLE)
 80002e6:	683b      	ldr	r3, [r7, #0]
 80002e8:	799b      	ldrb	r3, [r3, #6]
 80002ea:	2b01      	cmp	r3, #1
 80002ec:	d106      	bne.n	80002fc <CAN_Init+0x70>
    {
      CANx->MCR |= CAN_MCR_TTCM;
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	601a      	str	r2, [r3, #0]
 80002fa:	e005      	b.n	8000308 <CAN_Init+0x7c>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_TTCM;
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	601a      	str	r2, [r3, #0]
    }

    /* Set the automatic bus-off management */
    if (CAN_InitStruct->CAN_ABOM == ENABLE)
 8000308:	683b      	ldr	r3, [r7, #0]
 800030a:	79db      	ldrb	r3, [r3, #7]
 800030c:	2b01      	cmp	r3, #1
 800030e:	d106      	bne.n	800031e <CAN_Init+0x92>
    {
      CANx->MCR |= CAN_MCR_ABOM;
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	601a      	str	r2, [r3, #0]
 800031c:	e005      	b.n	800032a <CAN_Init+0x9e>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_ABOM;
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	601a      	str	r2, [r3, #0]
    }

    /* Set the automatic wake-up mode */
    if (CAN_InitStruct->CAN_AWUM == ENABLE)
 800032a:	683b      	ldr	r3, [r7, #0]
 800032c:	7a1b      	ldrb	r3, [r3, #8]
 800032e:	2b01      	cmp	r3, #1
 8000330:	d106      	bne.n	8000340 <CAN_Init+0xb4>
    {
      CANx->MCR |= CAN_MCR_AWUM;
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	f043 0220 	orr.w	r2, r3, #32
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	601a      	str	r2, [r3, #0]
 800033e:	e005      	b.n	800034c <CAN_Init+0xc0>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_AWUM;
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	f023 0220 	bic.w	r2, r3, #32
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	601a      	str	r2, [r3, #0]
    }

    /* Set the no automatic retransmission */
    if (CAN_InitStruct->CAN_NART == ENABLE)
 800034c:	683b      	ldr	r3, [r7, #0]
 800034e:	7a5b      	ldrb	r3, [r3, #9]
 8000350:	2b01      	cmp	r3, #1
 8000352:	d106      	bne.n	8000362 <CAN_Init+0xd6>
    {
      CANx->MCR |= CAN_MCR_NART;
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	f043 0210 	orr.w	r2, r3, #16
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	601a      	str	r2, [r3, #0]
 8000360:	e005      	b.n	800036e <CAN_Init+0xe2>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_NART;
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	f023 0210 	bic.w	r2, r3, #16
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	601a      	str	r2, [r3, #0]
    }

    /* Set the receive FIFO locked mode */
    if (CAN_InitStruct->CAN_RFLM == ENABLE)
 800036e:	683b      	ldr	r3, [r7, #0]
 8000370:	7a9b      	ldrb	r3, [r3, #10]
 8000372:	2b01      	cmp	r3, #1
 8000374:	d106      	bne.n	8000384 <CAN_Init+0xf8>
    {
      CANx->MCR |= CAN_MCR_RFLM;
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	681b      	ldr	r3, [r3, #0]
 800037a:	f043 0208 	orr.w	r2, r3, #8
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	601a      	str	r2, [r3, #0]
 8000382:	e005      	b.n	8000390 <CAN_Init+0x104>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_RFLM;
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	f023 0208 	bic.w	r2, r3, #8
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	601a      	str	r2, [r3, #0]
    }

    /* Set the transmit FIFO priority */
    if (CAN_InitStruct->CAN_TXFP == ENABLE)
 8000390:	683b      	ldr	r3, [r7, #0]
 8000392:	7adb      	ldrb	r3, [r3, #11]
 8000394:	2b01      	cmp	r3, #1
 8000396:	d106      	bne.n	80003a6 <CAN_Init+0x11a>
    {
      CANx->MCR |= CAN_MCR_TXFP;
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	f043 0204 	orr.w	r2, r3, #4
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	601a      	str	r2, [r3, #0]
 80003a4:	e005      	b.n	80003b2 <CAN_Init+0x126>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_TXFP;
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	f023 0204 	bic.w	r2, r3, #4
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	601a      	str	r2, [r3, #0]
    }

    /* Set the bit timing register */
    CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
 80003b2:	683b      	ldr	r3, [r7, #0]
 80003b4:	789b      	ldrb	r3, [r3, #2]
 80003b6:	079a      	lsls	r2, r3, #30
                ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
 80003b8:	683b      	ldr	r3, [r7, #0]
 80003ba:	78db      	ldrb	r3, [r3, #3]
 80003bc:	061b      	lsls	r3, r3, #24
    CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
 80003be:	431a      	orrs	r2, r3
                ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | \
 80003c0:	683b      	ldr	r3, [r7, #0]
 80003c2:	791b      	ldrb	r3, [r3, #4]
 80003c4:	041b      	lsls	r3, r3, #16
                ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
 80003c6:	431a      	orrs	r2, r3
                ((uint32_t)CAN_InitStruct->CAN_BS2 << 20) | \
 80003c8:	683b      	ldr	r3, [r7, #0]
 80003ca:	795b      	ldrb	r3, [r3, #5]
 80003cc:	051b      	lsls	r3, r3, #20
                ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | \
 80003ce:	431a      	orrs	r2, r3
               ((uint32_t)CAN_InitStruct->CAN_Prescaler - 1);
 80003d0:	683b      	ldr	r3, [r7, #0]
 80003d2:	881b      	ldrh	r3, [r3, #0]
 80003d4:	3b01      	subs	r3, #1
                ((uint32_t)CAN_InitStruct->CAN_BS2 << 20) | \
 80003d6:	431a      	orrs	r2, r3
    CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	61da      	str	r2, [r3, #28]

    /* Request leave initialisation */
    CANx->MCR &= ~(uint32_t)CAN_MCR_INRQ;
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	f023 0201 	bic.w	r2, r3, #1
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	601a      	str	r2, [r3, #0]

   /* Wait the acknowledge */
   wait_ack = 0;
 80003e8:	2300      	movs	r3, #0
 80003ea:	60bb      	str	r3, [r7, #8]

   while (((CANx->MSR & CAN_MSR_INAK) == CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
 80003ec:	e002      	b.n	80003f4 <CAN_Init+0x168>
   {
     wait_ack++;
 80003ee:	68bb      	ldr	r3, [r7, #8]
 80003f0:	3301      	adds	r3, #1
 80003f2:	60bb      	str	r3, [r7, #8]
   while (((CANx->MSR & CAN_MSR_INAK) == CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	685b      	ldr	r3, [r3, #4]
 80003f8:	f003 0301 	and.w	r3, r3, #1
 80003fc:	2b01      	cmp	r3, #1
 80003fe:	d104      	bne.n	800040a <CAN_Init+0x17e>
 8000400:	68bb      	ldr	r3, [r7, #8]
 8000402:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000406:	4293      	cmp	r3, r2
 8000408:	d1f1      	bne.n	80003ee <CAN_Init+0x162>
   }

    /* ...and check acknowledged */
    if ((CANx->MSR & CAN_MSR_INAK) == CAN_MSR_INAK)
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	685b      	ldr	r3, [r3, #4]
 800040e:	f003 0301 	and.w	r3, r3, #1
 8000412:	2b01      	cmp	r3, #1
 8000414:	d102      	bne.n	800041c <CAN_Init+0x190>
    {
      InitStatus = CAN_InitStatus_Failed;
 8000416:	2300      	movs	r3, #0
 8000418:	73fb      	strb	r3, [r7, #15]
 800041a:	e001      	b.n	8000420 <CAN_Init+0x194>
    }
    else
    {
      InitStatus = CAN_InitStatus_Success ;
 800041c:	2301      	movs	r3, #1
 800041e:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* At this step, return the status of initialization */
  return InitStatus;
 8000420:	7bfb      	ldrb	r3, [r7, #15]
}
 8000422:	4618      	mov	r0, r3
 8000424:	3714      	adds	r7, #20
 8000426:	46bd      	mov	sp, r7
 8000428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800042c:	4770      	bx	lr
	...

08000430 <CAN_FilterInit>:
  * @param  CAN_FilterInitStruct: pointer to a CAN_FilterInitTypeDef structure that
  *         contains the configuration information.
  * @retval None
  */
void CAN_FilterInit(CAN_FilterInitTypeDef* CAN_FilterInitStruct)
{
 8000430:	b480      	push	{r7}
 8000432:	b085      	sub	sp, #20
 8000434:	af00      	add	r7, sp, #0
 8000436:	6078      	str	r0, [r7, #4]
  uint32_t filter_number_bit_pos = 0;
 8000438:	2300      	movs	r3, #0
 800043a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_CAN_FILTER_MODE(CAN_FilterInitStruct->CAN_FilterMode));
  assert_param(IS_CAN_FILTER_SCALE(CAN_FilterInitStruct->CAN_FilterScale));
  assert_param(IS_CAN_FILTER_FIFO(CAN_FilterInitStruct->CAN_FilterFIFOAssignment));
  assert_param(IS_FUNCTIONAL_STATE(CAN_FilterInitStruct->CAN_FilterActivation));

  filter_number_bit_pos = ((uint32_t)1) << CAN_FilterInitStruct->CAN_FilterNumber;
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	7a9b      	ldrb	r3, [r3, #10]
 8000440:	461a      	mov	r2, r3
 8000442:	2301      	movs	r3, #1
 8000444:	4093      	lsls	r3, r2
 8000446:	60fb      	str	r3, [r7, #12]

  /* Initialisation mode for the filter */
  CAN1->FMR |= FMR_FINIT;
 8000448:	4a56      	ldr	r2, [pc, #344]	; (80005a4 <CAN_FilterInit+0x174>)
 800044a:	4b56      	ldr	r3, [pc, #344]	; (80005a4 <CAN_FilterInit+0x174>)
 800044c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000450:	f043 0301 	orr.w	r3, r3, #1
 8000454:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  /* Filter Deactivation */
  CAN1->FA1R &= ~(uint32_t)filter_number_bit_pos;
 8000458:	4952      	ldr	r1, [pc, #328]	; (80005a4 <CAN_FilterInit+0x174>)
 800045a:	4b52      	ldr	r3, [pc, #328]	; (80005a4 <CAN_FilterInit+0x174>)
 800045c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000460:	68fb      	ldr	r3, [r7, #12]
 8000462:	43db      	mvns	r3, r3
 8000464:	4013      	ands	r3, r2
 8000466:	f8c1 321c 	str.w	r3, [r1, #540]	; 0x21c

  /* Filter Scale */
  if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_16bit)
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	7b1b      	ldrb	r3, [r3, #12]
 800046e:	2b00      	cmp	r3, #0
 8000470:	d125      	bne.n	80004be <CAN_FilterInit+0x8e>
  {
    /* 16-bit scale for the filter */
    CAN1->FS1R &= ~(uint32_t)filter_number_bit_pos;
 8000472:	494c      	ldr	r1, [pc, #304]	; (80005a4 <CAN_FilterInit+0x174>)
 8000474:	4b4b      	ldr	r3, [pc, #300]	; (80005a4 <CAN_FilterInit+0x174>)
 8000476:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800047a:	68fb      	ldr	r3, [r7, #12]
 800047c:	43db      	mvns	r3, r3
 800047e:	4013      	ands	r3, r2
 8000480:	f8c1 320c 	str.w	r3, [r1, #524]	; 0x20c

    /* First 16-bit identifier and First 16-bit mask */
    /* Or First 16-bit identifier and Second 16-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 8000484:	4947      	ldr	r1, [pc, #284]	; (80005a4 <CAN_FilterInit+0x174>)
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	7a9b      	ldrb	r3, [r3, #10]
 800048a:	4618      	mov	r0, r3
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	88db      	ldrh	r3, [r3, #6]
 8000490:	041b      	lsls	r3, r3, #16
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
 8000492:	687a      	ldr	r2, [r7, #4]
 8000494:	8852      	ldrh	r2, [r2, #2]
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
 8000496:	431a      	orrs	r2, r3
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 8000498:	f100 0348 	add.w	r3, r0, #72	; 0x48
 800049c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]

    /* Second 16-bit identifier and Second 16-bit mask */
    /* Or Third 16-bit identifier and Fourth 16-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 80004a0:	4940      	ldr	r1, [pc, #256]	; (80005a4 <CAN_FilterInit+0x174>)
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	7a9b      	ldrb	r3, [r3, #10]
 80004a6:	4618      	mov	r0, r3
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	889b      	ldrh	r3, [r3, #4]
 80004ac:	041b      	lsls	r3, r3, #16
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh);
 80004ae:	687a      	ldr	r2, [r7, #4]
 80004b0:	8812      	ldrh	r2, [r2, #0]
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 80004b2:	431a      	orrs	r2, r3
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 80004b4:	f100 0348 	add.w	r3, r0, #72	; 0x48
 80004b8:	00db      	lsls	r3, r3, #3
 80004ba:	440b      	add	r3, r1
 80004bc:	605a      	str	r2, [r3, #4]
  }

  if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_32bit)
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	7b1b      	ldrb	r3, [r3, #12]
 80004c2:	2b01      	cmp	r3, #1
 80004c4:	d124      	bne.n	8000510 <CAN_FilterInit+0xe0>
  {
    /* 32-bit scale for the filter */
    CAN1->FS1R |= filter_number_bit_pos;
 80004c6:	4937      	ldr	r1, [pc, #220]	; (80005a4 <CAN_FilterInit+0x174>)
 80004c8:	4b36      	ldr	r3, [pc, #216]	; (80005a4 <CAN_FilterInit+0x174>)
 80004ca:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80004ce:	68fb      	ldr	r3, [r7, #12]
 80004d0:	4313      	orrs	r3, r2
 80004d2:	f8c1 320c 	str.w	r3, [r1, #524]	; 0x20c
    /* 32-bit identifier or First 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 80004d6:	4933      	ldr	r1, [pc, #204]	; (80005a4 <CAN_FilterInit+0x174>)
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	7a9b      	ldrb	r3, [r3, #10]
 80004dc:	4618      	mov	r0, r3
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	881b      	ldrh	r3, [r3, #0]
 80004e2:	041b      	lsls	r3, r3, #16
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
 80004e4:	687a      	ldr	r2, [r7, #4]
 80004e6:	8852      	ldrh	r2, [r2, #2]
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
 80004e8:	431a      	orrs	r2, r3
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 80004ea:	f100 0348 	add.w	r3, r0, #72	; 0x48
 80004ee:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    /* 32-bit mask or Second 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 80004f2:	492c      	ldr	r1, [pc, #176]	; (80005a4 <CAN_FilterInit+0x174>)
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	7a9b      	ldrb	r3, [r3, #10]
 80004f8:	4618      	mov	r0, r3
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	889b      	ldrh	r3, [r3, #4]
 80004fe:	041b      	lsls	r3, r3, #16
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow);
 8000500:	687a      	ldr	r2, [r7, #4]
 8000502:	88d2      	ldrh	r2, [r2, #6]
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 8000504:	431a      	orrs	r2, r3
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 8000506:	f100 0348 	add.w	r3, r0, #72	; 0x48
 800050a:	00db      	lsls	r3, r3, #3
 800050c:	440b      	add	r3, r1
 800050e:	605a      	str	r2, [r3, #4]
  }

  /* Filter Mode */
  if (CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdMask)
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	7adb      	ldrb	r3, [r3, #11]
 8000514:	2b00      	cmp	r3, #0
 8000516:	d109      	bne.n	800052c <CAN_FilterInit+0xfc>
  {
    /*Id/Mask mode for the filter*/
    CAN1->FM1R &= ~(uint32_t)filter_number_bit_pos;
 8000518:	4922      	ldr	r1, [pc, #136]	; (80005a4 <CAN_FilterInit+0x174>)
 800051a:	4b22      	ldr	r3, [pc, #136]	; (80005a4 <CAN_FilterInit+0x174>)
 800051c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000520:	68fb      	ldr	r3, [r7, #12]
 8000522:	43db      	mvns	r3, r3
 8000524:	4013      	ands	r3, r2
 8000526:	f8c1 3204 	str.w	r3, [r1, #516]	; 0x204
 800052a:	e007      	b.n	800053c <CAN_FilterInit+0x10c>
  }
  else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
  {
    /*Identifier list mode for the filter*/
    CAN1->FM1R |= (uint32_t)filter_number_bit_pos;
 800052c:	491d      	ldr	r1, [pc, #116]	; (80005a4 <CAN_FilterInit+0x174>)
 800052e:	4b1d      	ldr	r3, [pc, #116]	; (80005a4 <CAN_FilterInit+0x174>)
 8000530:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000534:	68fb      	ldr	r3, [r7, #12]
 8000536:	4313      	orrs	r3, r2
 8000538:	f8c1 3204 	str.w	r3, [r1, #516]	; 0x204
  }

  /* Filter FIFO assignment */
  if (CAN_FilterInitStruct->CAN_FilterFIFOAssignment == CAN_Filter_FIFO0)
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	891b      	ldrh	r3, [r3, #8]
 8000540:	2b00      	cmp	r3, #0
 8000542:	d108      	bne.n	8000556 <CAN_FilterInit+0x126>
  {
    /* FIFO 0 assignation for the filter */
    CAN1->FFA1R &= ~(uint32_t)filter_number_bit_pos;
 8000544:	4917      	ldr	r1, [pc, #92]	; (80005a4 <CAN_FilterInit+0x174>)
 8000546:	4b17      	ldr	r3, [pc, #92]	; (80005a4 <CAN_FilterInit+0x174>)
 8000548:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800054c:	68fb      	ldr	r3, [r7, #12]
 800054e:	43db      	mvns	r3, r3
 8000550:	4013      	ands	r3, r2
 8000552:	f8c1 3214 	str.w	r3, [r1, #532]	; 0x214
  }

  if (CAN_FilterInitStruct->CAN_FilterFIFOAssignment == CAN_Filter_FIFO1)
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	891b      	ldrh	r3, [r3, #8]
 800055a:	2b01      	cmp	r3, #1
 800055c:	d107      	bne.n	800056e <CAN_FilterInit+0x13e>
  {
    /* FIFO 1 assignation for the filter */
    CAN1->FFA1R |= (uint32_t)filter_number_bit_pos;
 800055e:	4911      	ldr	r1, [pc, #68]	; (80005a4 <CAN_FilterInit+0x174>)
 8000560:	4b10      	ldr	r3, [pc, #64]	; (80005a4 <CAN_FilterInit+0x174>)
 8000562:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000566:	68fb      	ldr	r3, [r7, #12]
 8000568:	4313      	orrs	r3, r2
 800056a:	f8c1 3214 	str.w	r3, [r1, #532]	; 0x214
  }
  
  /* Filter activation */
  if (CAN_FilterInitStruct->CAN_FilterActivation == ENABLE)
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	7b5b      	ldrb	r3, [r3, #13]
 8000572:	2b01      	cmp	r3, #1
 8000574:	d107      	bne.n	8000586 <CAN_FilterInit+0x156>
  {
    CAN1->FA1R |= filter_number_bit_pos;
 8000576:	490b      	ldr	r1, [pc, #44]	; (80005a4 <CAN_FilterInit+0x174>)
 8000578:	4b0a      	ldr	r3, [pc, #40]	; (80005a4 <CAN_FilterInit+0x174>)
 800057a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800057e:	68fb      	ldr	r3, [r7, #12]
 8000580:	4313      	orrs	r3, r2
 8000582:	f8c1 321c 	str.w	r3, [r1, #540]	; 0x21c
  }

  /* Leave the initialisation mode for the filter */
  CAN1->FMR &= ~FMR_FINIT;
 8000586:	4a07      	ldr	r2, [pc, #28]	; (80005a4 <CAN_FilterInit+0x174>)
 8000588:	4b06      	ldr	r3, [pc, #24]	; (80005a4 <CAN_FilterInit+0x174>)
 800058a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800058e:	f023 0301 	bic.w	r3, r3, #1
 8000592:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
 8000596:	bf00      	nop
 8000598:	3714      	adds	r7, #20
 800059a:	46bd      	mov	sp, r7
 800059c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop
 80005a4:	40006400 	.word	0x40006400

080005a8 <CAN_StructInit>:
  * @brief  Fills each CAN_InitStruct member with its default value.
  * @param  CAN_InitStruct: pointer to a CAN_InitTypeDef structure which ill be initialized.
  * @retval None
  */
void CAN_StructInit(CAN_InitTypeDef* CAN_InitStruct)
{
 80005a8:	b480      	push	{r7}
 80005aa:	b083      	sub	sp, #12
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
  /* Reset CAN init structure parameters values */
  
  /* Initialize the time triggered communication mode */
  CAN_InitStruct->CAN_TTCM = DISABLE;
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	2200      	movs	r2, #0
 80005b4:	719a      	strb	r2, [r3, #6]
  
  /* Initialize the automatic bus-off management */
  CAN_InitStruct->CAN_ABOM = DISABLE;
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	2200      	movs	r2, #0
 80005ba:	71da      	strb	r2, [r3, #7]
  
  /* Initialize the automatic wake-up mode */
  CAN_InitStruct->CAN_AWUM = DISABLE;
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	2200      	movs	r2, #0
 80005c0:	721a      	strb	r2, [r3, #8]
  
  /* Initialize the no automatic retransmission */
  CAN_InitStruct->CAN_NART = DISABLE;
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	2200      	movs	r2, #0
 80005c6:	725a      	strb	r2, [r3, #9]
  
  /* Initialize the receive FIFO locked mode */
  CAN_InitStruct->CAN_RFLM = DISABLE;
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	2200      	movs	r2, #0
 80005cc:	729a      	strb	r2, [r3, #10]
  
  /* Initialize the transmit FIFO priority */
  CAN_InitStruct->CAN_TXFP = DISABLE;
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	2200      	movs	r2, #0
 80005d2:	72da      	strb	r2, [r3, #11]
  
  /* Initialize the CAN_Mode member */
  CAN_InitStruct->CAN_Mode = CAN_Mode_Normal;
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	2200      	movs	r2, #0
 80005d8:	709a      	strb	r2, [r3, #2]
  
  /* Initialize the CAN_SJW member */
  CAN_InitStruct->CAN_SJW = CAN_SJW_1tq;
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	2200      	movs	r2, #0
 80005de:	70da      	strb	r2, [r3, #3]
  
  /* Initialize the CAN_BS1 member */
  CAN_InitStruct->CAN_BS1 = CAN_BS1_4tq;
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	2203      	movs	r2, #3
 80005e4:	711a      	strb	r2, [r3, #4]
  
  /* Initialize the CAN_BS2 member */
  CAN_InitStruct->CAN_BS2 = CAN_BS2_3tq;
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	2202      	movs	r2, #2
 80005ea:	715a      	strb	r2, [r3, #5]
  
  /* Initialize the CAN_Prescaler member */
  CAN_InitStruct->CAN_Prescaler = 1;
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	2201      	movs	r2, #1
 80005f0:	801a      	strh	r2, [r3, #0]
}
 80005f2:	bf00      	nop
 80005f4:	370c      	adds	r7, #12
 80005f6:	46bd      	mov	sp, r7
 80005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fc:	4770      	bx	lr

080005fe <CAN_Transmit>:
  * @param  TxMessage: pointer to a structure which contains CAN Id, CAN DLC and CAN data.
  * @retval The number of the mailbox that is used for transmission or
  *         CAN_TxStatus_NoMailBox if there is no empty mailbox.
  */
uint8_t CAN_Transmit(CAN_TypeDef* CANx, CanTxMsg* TxMessage)
{
 80005fe:	b480      	push	{r7}
 8000600:	b085      	sub	sp, #20
 8000602:	af00      	add	r7, sp, #0
 8000604:	6078      	str	r0, [r7, #4]
 8000606:	6039      	str	r1, [r7, #0]
  uint8_t transmit_mailbox = 0;
 8000608:	2300      	movs	r3, #0
 800060a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_CAN_IDTYPE(TxMessage->IDE));
  assert_param(IS_CAN_RTR(TxMessage->RTR));
  assert_param(IS_CAN_DLC(TxMessage->DLC));

  /* Select one empty transmit mailbox */
  if ((CANx->TSR&CAN_TSR_TME0) == CAN_TSR_TME0)
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	689b      	ldr	r3, [r3, #8]
 8000610:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000614:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8000618:	d102      	bne.n	8000620 <CAN_Transmit+0x22>
  {
    transmit_mailbox = 0;
 800061a:	2300      	movs	r3, #0
 800061c:	73fb      	strb	r3, [r7, #15]
 800061e:	e015      	b.n	800064c <CAN_Transmit+0x4e>
  }
  else if ((CANx->TSR&CAN_TSR_TME1) == CAN_TSR_TME1)
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	689b      	ldr	r3, [r3, #8]
 8000624:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000628:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800062c:	d102      	bne.n	8000634 <CAN_Transmit+0x36>
  {
    transmit_mailbox = 1;
 800062e:	2301      	movs	r3, #1
 8000630:	73fb      	strb	r3, [r7, #15]
 8000632:	e00b      	b.n	800064c <CAN_Transmit+0x4e>
  }
  else if ((CANx->TSR&CAN_TSR_TME2) == CAN_TSR_TME2)
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	689b      	ldr	r3, [r3, #8]
 8000638:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800063c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000640:	d102      	bne.n	8000648 <CAN_Transmit+0x4a>
  {
    transmit_mailbox = 2;
 8000642:	2302      	movs	r3, #2
 8000644:	73fb      	strb	r3, [r7, #15]
 8000646:	e001      	b.n	800064c <CAN_Transmit+0x4e>
  }
  else
  {
    transmit_mailbox = CAN_TxStatus_NoMailBox;
 8000648:	2304      	movs	r3, #4
 800064a:	73fb      	strb	r3, [r7, #15]
  }

  if (transmit_mailbox != CAN_TxStatus_NoMailBox)
 800064c:	7bfb      	ldrb	r3, [r7, #15]
 800064e:	2b04      	cmp	r3, #4
 8000650:	f000 809c 	beq.w	800078c <CAN_Transmit+0x18e>
  {
    /* Set up the Id */
    CANx->sTxMailBox[transmit_mailbox].TIR &= TMIDxR_TXRQ;
 8000654:	7bfb      	ldrb	r3, [r7, #15]
 8000656:	7bfa      	ldrb	r2, [r7, #15]
 8000658:	6879      	ldr	r1, [r7, #4]
 800065a:	3218      	adds	r2, #24
 800065c:	0112      	lsls	r2, r2, #4
 800065e:	440a      	add	r2, r1
 8000660:	6812      	ldr	r2, [r2, #0]
 8000662:	f002 0201 	and.w	r2, r2, #1
 8000666:	6879      	ldr	r1, [r7, #4]
 8000668:	3318      	adds	r3, #24
 800066a:	011b      	lsls	r3, r3, #4
 800066c:	440b      	add	r3, r1
 800066e:	601a      	str	r2, [r3, #0]
    if (TxMessage->IDE == CAN_Id_Standard)
 8000670:	683b      	ldr	r3, [r7, #0]
 8000672:	7a1b      	ldrb	r3, [r3, #8]
 8000674:	2b00      	cmp	r3, #0
 8000676:	d113      	bne.n	80006a0 <CAN_Transmit+0xa2>
    {
      assert_param(IS_CAN_STDID(TxMessage->StdId));  
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->StdId << 21) | \
 8000678:	7bfb      	ldrb	r3, [r7, #15]
 800067a:	7bfa      	ldrb	r2, [r7, #15]
 800067c:	6879      	ldr	r1, [r7, #4]
 800067e:	3218      	adds	r2, #24
 8000680:	0112      	lsls	r2, r2, #4
 8000682:	440a      	add	r2, r1
 8000684:	6811      	ldr	r1, [r2, #0]
 8000686:	683a      	ldr	r2, [r7, #0]
 8000688:	6812      	ldr	r2, [r2, #0]
 800068a:	0552      	lsls	r2, r2, #21
                                                  TxMessage->RTR);
 800068c:	6838      	ldr	r0, [r7, #0]
 800068e:	7a40      	ldrb	r0, [r0, #9]
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->StdId << 21) | \
 8000690:	4302      	orrs	r2, r0
 8000692:	430a      	orrs	r2, r1
 8000694:	6879      	ldr	r1, [r7, #4]
 8000696:	3318      	adds	r3, #24
 8000698:	011b      	lsls	r3, r3, #4
 800069a:	440b      	add	r3, r1
 800069c:	601a      	str	r2, [r3, #0]
 800069e:	e015      	b.n	80006cc <CAN_Transmit+0xce>
    }
    else
    {
      assert_param(IS_CAN_EXTID(TxMessage->ExtId));
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->ExtId << 3) | \
 80006a0:	7bfb      	ldrb	r3, [r7, #15]
 80006a2:	7bfa      	ldrb	r2, [r7, #15]
 80006a4:	6879      	ldr	r1, [r7, #4]
 80006a6:	3218      	adds	r2, #24
 80006a8:	0112      	lsls	r2, r2, #4
 80006aa:	440a      	add	r2, r1
 80006ac:	6811      	ldr	r1, [r2, #0]
 80006ae:	683a      	ldr	r2, [r7, #0]
 80006b0:	6852      	ldr	r2, [r2, #4]
 80006b2:	00d2      	lsls	r2, r2, #3
                                                  TxMessage->IDE | \
 80006b4:	6838      	ldr	r0, [r7, #0]
 80006b6:	7a00      	ldrb	r0, [r0, #8]
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->ExtId << 3) | \
 80006b8:	4302      	orrs	r2, r0
                                                  TxMessage->RTR);
 80006ba:	6838      	ldr	r0, [r7, #0]
 80006bc:	7a40      	ldrb	r0, [r0, #9]
                                                  TxMessage->IDE | \
 80006be:	4302      	orrs	r2, r0
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->ExtId << 3) | \
 80006c0:	430a      	orrs	r2, r1
 80006c2:	6879      	ldr	r1, [r7, #4]
 80006c4:	3318      	adds	r3, #24
 80006c6:	011b      	lsls	r3, r3, #4
 80006c8:	440b      	add	r3, r1
 80006ca:	601a      	str	r2, [r3, #0]
    }
    
    /* Set up the DLC */
    TxMessage->DLC &= (uint8_t)0x0000000F;
 80006cc:	683b      	ldr	r3, [r7, #0]
 80006ce:	7a9b      	ldrb	r3, [r3, #10]
 80006d0:	f003 030f 	and.w	r3, r3, #15
 80006d4:	b2da      	uxtb	r2, r3
 80006d6:	683b      	ldr	r3, [r7, #0]
 80006d8:	729a      	strb	r2, [r3, #10]
    CANx->sTxMailBox[transmit_mailbox].TDTR &= (uint32_t)0xFFFFFFF0;
 80006da:	7bfb      	ldrb	r3, [r7, #15]
 80006dc:	7bfa      	ldrb	r2, [r7, #15]
 80006de:	6879      	ldr	r1, [r7, #4]
 80006e0:	3218      	adds	r2, #24
 80006e2:	0112      	lsls	r2, r2, #4
 80006e4:	440a      	add	r2, r1
 80006e6:	3204      	adds	r2, #4
 80006e8:	6812      	ldr	r2, [r2, #0]
 80006ea:	f022 020f 	bic.w	r2, r2, #15
 80006ee:	6879      	ldr	r1, [r7, #4]
 80006f0:	3318      	adds	r3, #24
 80006f2:	011b      	lsls	r3, r3, #4
 80006f4:	440b      	add	r3, r1
 80006f6:	3304      	adds	r3, #4
 80006f8:	601a      	str	r2, [r3, #0]
    CANx->sTxMailBox[transmit_mailbox].TDTR |= TxMessage->DLC;
 80006fa:	7bfb      	ldrb	r3, [r7, #15]
 80006fc:	7bfa      	ldrb	r2, [r7, #15]
 80006fe:	6879      	ldr	r1, [r7, #4]
 8000700:	3218      	adds	r2, #24
 8000702:	0112      	lsls	r2, r2, #4
 8000704:	440a      	add	r2, r1
 8000706:	3204      	adds	r2, #4
 8000708:	6812      	ldr	r2, [r2, #0]
 800070a:	6839      	ldr	r1, [r7, #0]
 800070c:	7a89      	ldrb	r1, [r1, #10]
 800070e:	430a      	orrs	r2, r1
 8000710:	6879      	ldr	r1, [r7, #4]
 8000712:	3318      	adds	r3, #24
 8000714:	011b      	lsls	r3, r3, #4
 8000716:	440b      	add	r3, r1
 8000718:	3304      	adds	r3, #4
 800071a:	601a      	str	r2, [r3, #0]

    /* Set up the data field */
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
 800071c:	7bfb      	ldrb	r3, [r7, #15]
 800071e:	683a      	ldr	r2, [r7, #0]
 8000720:	7b92      	ldrb	r2, [r2, #14]
 8000722:	0611      	lsls	r1, r2, #24
                                             ((uint32_t)TxMessage->Data[2] << 16) |
 8000724:	683a      	ldr	r2, [r7, #0]
 8000726:	7b52      	ldrb	r2, [r2, #13]
 8000728:	0412      	lsls	r2, r2, #16
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
 800072a:	4311      	orrs	r1, r2
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
 800072c:	683a      	ldr	r2, [r7, #0]
 800072e:	7b12      	ldrb	r2, [r2, #12]
 8000730:	0212      	lsls	r2, r2, #8
                                             ((uint32_t)TxMessage->Data[2] << 16) |
 8000732:	430a      	orrs	r2, r1
                                             ((uint32_t)TxMessage->Data[0]));
 8000734:	6839      	ldr	r1, [r7, #0]
 8000736:	7ac9      	ldrb	r1, [r1, #11]
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
 8000738:	430a      	orrs	r2, r1
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
 800073a:	6879      	ldr	r1, [r7, #4]
 800073c:	011b      	lsls	r3, r3, #4
 800073e:	440b      	add	r3, r1
 8000740:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8000744:	601a      	str	r2, [r3, #0]
    CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
 8000746:	7bfb      	ldrb	r3, [r7, #15]
 8000748:	683a      	ldr	r2, [r7, #0]
 800074a:	7c92      	ldrb	r2, [r2, #18]
 800074c:	0611      	lsls	r1, r2, #24
                                             ((uint32_t)TxMessage->Data[6] << 16) |
 800074e:	683a      	ldr	r2, [r7, #0]
 8000750:	7c52      	ldrb	r2, [r2, #17]
 8000752:	0412      	lsls	r2, r2, #16
    CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
 8000754:	4311      	orrs	r1, r2
                                             ((uint32_t)TxMessage->Data[5] << 8) |
 8000756:	683a      	ldr	r2, [r7, #0]
 8000758:	7c12      	ldrb	r2, [r2, #16]
 800075a:	0212      	lsls	r2, r2, #8
                                             ((uint32_t)TxMessage->Data[6] << 16) |
 800075c:	430a      	orrs	r2, r1
                                             ((uint32_t)TxMessage->Data[4]));
 800075e:	6839      	ldr	r1, [r7, #0]
 8000760:	7bc9      	ldrb	r1, [r1, #15]
                                             ((uint32_t)TxMessage->Data[5] << 8) |
 8000762:	430a      	orrs	r2, r1
    CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
 8000764:	6879      	ldr	r1, [r7, #4]
 8000766:	011b      	lsls	r3, r3, #4
 8000768:	440b      	add	r3, r1
 800076a:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800076e:	601a      	str	r2, [r3, #0]
    /* Request transmission */
    CANx->sTxMailBox[transmit_mailbox].TIR |= TMIDxR_TXRQ;
 8000770:	7bfb      	ldrb	r3, [r7, #15]
 8000772:	7bfa      	ldrb	r2, [r7, #15]
 8000774:	6879      	ldr	r1, [r7, #4]
 8000776:	3218      	adds	r2, #24
 8000778:	0112      	lsls	r2, r2, #4
 800077a:	440a      	add	r2, r1
 800077c:	6812      	ldr	r2, [r2, #0]
 800077e:	f042 0201 	orr.w	r2, r2, #1
 8000782:	6879      	ldr	r1, [r7, #4]
 8000784:	3318      	adds	r3, #24
 8000786:	011b      	lsls	r3, r3, #4
 8000788:	440b      	add	r3, r1
 800078a:	601a      	str	r2, [r3, #0]
  }
  return transmit_mailbox;
 800078c:	7bfb      	ldrb	r3, [r7, #15]
}
 800078e:	4618      	mov	r0, r3
 8000790:	3714      	adds	r7, #20
 8000792:	46bd      	mov	sp, r7
 8000794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000798:	4770      	bx	lr

0800079a <CAN_Receive>:
  * @param  RxMessage: pointer to a structure receive frame which contains CAN Id,
  *         CAN DLC, CAN data and FMI number.
  * @retval None
  */
void CAN_Receive(CAN_TypeDef* CANx, uint8_t FIFONumber, CanRxMsg* RxMessage)
{
 800079a:	b480      	push	{r7}
 800079c:	b085      	sub	sp, #20
 800079e:	af00      	add	r7, sp, #0
 80007a0:	60f8      	str	r0, [r7, #12]
 80007a2:	460b      	mov	r3, r1
 80007a4:	607a      	str	r2, [r7, #4]
 80007a6:	72fb      	strb	r3, [r7, #11]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_FIFO(FIFONumber));
  /* Get the Id */
  RxMessage->IDE = (uint8_t)0x04 & CANx->sFIFOMailBox[FIFONumber].RIR;
 80007a8:	7afb      	ldrb	r3, [r7, #11]
 80007aa:	68fa      	ldr	r2, [r7, #12]
 80007ac:	331b      	adds	r3, #27
 80007ae:	011b      	lsls	r3, r3, #4
 80007b0:	4413      	add	r3, r2
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	b2db      	uxtb	r3, r3
 80007b6:	f003 0304 	and.w	r3, r3, #4
 80007ba:	b2da      	uxtb	r2, r3
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	721a      	strb	r2, [r3, #8]
  if (RxMessage->IDE == CAN_Id_Standard)
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	7a1b      	ldrb	r3, [r3, #8]
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d10b      	bne.n	80007e0 <CAN_Receive+0x46>
  {
    RxMessage->StdId = (uint32_t)0x000007FF & (CANx->sFIFOMailBox[FIFONumber].RIR >> 21);
 80007c8:	7afb      	ldrb	r3, [r7, #11]
 80007ca:	68fa      	ldr	r2, [r7, #12]
 80007cc:	331b      	adds	r3, #27
 80007ce:	011b      	lsls	r3, r3, #4
 80007d0:	4413      	add	r3, r2
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	0d5b      	lsrs	r3, r3, #21
 80007d6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	601a      	str	r2, [r3, #0]
 80007de:	e00a      	b.n	80007f6 <CAN_Receive+0x5c>
  }
  else
  {
    RxMessage->ExtId = (uint32_t)0x1FFFFFFF & (CANx->sFIFOMailBox[FIFONumber].RIR >> 3);
 80007e0:	7afb      	ldrb	r3, [r7, #11]
 80007e2:	68fa      	ldr	r2, [r7, #12]
 80007e4:	331b      	adds	r3, #27
 80007e6:	011b      	lsls	r3, r3, #4
 80007e8:	4413      	add	r3, r2
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	08db      	lsrs	r3, r3, #3
 80007ee:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	605a      	str	r2, [r3, #4]
  }
  
  RxMessage->RTR = (uint8_t)0x02 & CANx->sFIFOMailBox[FIFONumber].RIR;
 80007f6:	7afb      	ldrb	r3, [r7, #11]
 80007f8:	68fa      	ldr	r2, [r7, #12]
 80007fa:	331b      	adds	r3, #27
 80007fc:	011b      	lsls	r3, r3, #4
 80007fe:	4413      	add	r3, r2
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	b2db      	uxtb	r3, r3
 8000804:	f003 0302 	and.w	r3, r3, #2
 8000808:	b2da      	uxtb	r2, r3
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	725a      	strb	r2, [r3, #9]
  /* Get the DLC */
  RxMessage->DLC = (uint8_t)0x0F & CANx->sFIFOMailBox[FIFONumber].RDTR;
 800080e:	7afb      	ldrb	r3, [r7, #11]
 8000810:	68fa      	ldr	r2, [r7, #12]
 8000812:	331b      	adds	r3, #27
 8000814:	011b      	lsls	r3, r3, #4
 8000816:	4413      	add	r3, r2
 8000818:	3304      	adds	r3, #4
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	b2db      	uxtb	r3, r3
 800081e:	f003 030f 	and.w	r3, r3, #15
 8000822:	b2da      	uxtb	r2, r3
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	729a      	strb	r2, [r3, #10]
  /* Get the FMI */
  RxMessage->FMI = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDTR >> 8);
 8000828:	7afb      	ldrb	r3, [r7, #11]
 800082a:	68fa      	ldr	r2, [r7, #12]
 800082c:	331b      	adds	r3, #27
 800082e:	011b      	lsls	r3, r3, #4
 8000830:	4413      	add	r3, r2
 8000832:	3304      	adds	r3, #4
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	0a1b      	lsrs	r3, r3, #8
 8000838:	b2da      	uxtb	r2, r3
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	74da      	strb	r2, [r3, #19]
  /* Get the data field */
  RxMessage->Data[0] = (uint8_t)0xFF & CANx->sFIFOMailBox[FIFONumber].RDLR;
 800083e:	7afb      	ldrb	r3, [r7, #11]
 8000840:	68fa      	ldr	r2, [r7, #12]
 8000842:	011b      	lsls	r3, r3, #4
 8000844:	4413      	add	r3, r2
 8000846:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	b2da      	uxtb	r2, r3
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	72da      	strb	r2, [r3, #11]
  RxMessage->Data[1] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 8);
 8000852:	7afb      	ldrb	r3, [r7, #11]
 8000854:	68fa      	ldr	r2, [r7, #12]
 8000856:	011b      	lsls	r3, r3, #4
 8000858:	4413      	add	r3, r2
 800085a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	0a1b      	lsrs	r3, r3, #8
 8000862:	b2da      	uxtb	r2, r3
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	731a      	strb	r2, [r3, #12]
  RxMessage->Data[2] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 16);
 8000868:	7afb      	ldrb	r3, [r7, #11]
 800086a:	68fa      	ldr	r2, [r7, #12]
 800086c:	011b      	lsls	r3, r3, #4
 800086e:	4413      	add	r3, r2
 8000870:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	0c1b      	lsrs	r3, r3, #16
 8000878:	b2da      	uxtb	r2, r3
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	735a      	strb	r2, [r3, #13]
  RxMessage->Data[3] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 24);
 800087e:	7afb      	ldrb	r3, [r7, #11]
 8000880:	68fa      	ldr	r2, [r7, #12]
 8000882:	011b      	lsls	r3, r3, #4
 8000884:	4413      	add	r3, r2
 8000886:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	0e1b      	lsrs	r3, r3, #24
 800088e:	b2da      	uxtb	r2, r3
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	739a      	strb	r2, [r3, #14]
  RxMessage->Data[4] = (uint8_t)0xFF & CANx->sFIFOMailBox[FIFONumber].RDHR;
 8000894:	7afb      	ldrb	r3, [r7, #11]
 8000896:	68fa      	ldr	r2, [r7, #12]
 8000898:	011b      	lsls	r3, r3, #4
 800089a:	4413      	add	r3, r2
 800089c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	b2da      	uxtb	r2, r3
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	73da      	strb	r2, [r3, #15]
  RxMessage->Data[5] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 8);
 80008a8:	7afb      	ldrb	r3, [r7, #11]
 80008aa:	68fa      	ldr	r2, [r7, #12]
 80008ac:	011b      	lsls	r3, r3, #4
 80008ae:	4413      	add	r3, r2
 80008b0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	0a1b      	lsrs	r3, r3, #8
 80008b8:	b2da      	uxtb	r2, r3
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	741a      	strb	r2, [r3, #16]
  RxMessage->Data[6] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 16);
 80008be:	7afb      	ldrb	r3, [r7, #11]
 80008c0:	68fa      	ldr	r2, [r7, #12]
 80008c2:	011b      	lsls	r3, r3, #4
 80008c4:	4413      	add	r3, r2
 80008c6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	0c1b      	lsrs	r3, r3, #16
 80008ce:	b2da      	uxtb	r2, r3
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	745a      	strb	r2, [r3, #17]
  RxMessage->Data[7] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 24);
 80008d4:	7afb      	ldrb	r3, [r7, #11]
 80008d6:	68fa      	ldr	r2, [r7, #12]
 80008d8:	011b      	lsls	r3, r3, #4
 80008da:	4413      	add	r3, r2
 80008dc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	0e1b      	lsrs	r3, r3, #24
 80008e4:	b2da      	uxtb	r2, r3
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	749a      	strb	r2, [r3, #18]
  /* Release the FIFO */
  /* Release FIFO0 */
  if (FIFONumber == CAN_FIFO0)
 80008ea:	7afb      	ldrb	r3, [r7, #11]
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d106      	bne.n	80008fe <CAN_Receive+0x164>
  {
    CANx->RF0R |= CAN_RF0R_RFOM0;
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	68db      	ldr	r3, [r3, #12]
 80008f4:	f043 0220 	orr.w	r2, r3, #32
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	60da      	str	r2, [r3, #12]
  /* Release FIFO1 */
  else /* FIFONumber == CAN_FIFO1 */
  {
    CANx->RF1R |= CAN_RF1R_RFOM1;
  }
}
 80008fc:	e005      	b.n	800090a <CAN_Receive+0x170>
    CANx->RF1R |= CAN_RF1R_RFOM1;
 80008fe:	68fb      	ldr	r3, [r7, #12]
 8000900:	691b      	ldr	r3, [r3, #16]
 8000902:	f043 0220 	orr.w	r2, r3, #32
 8000906:	68fb      	ldr	r3, [r7, #12]
 8000908:	611a      	str	r2, [r3, #16]
}
 800090a:	bf00      	nop
 800090c:	3714      	adds	r7, #20
 800090e:	46bd      	mov	sp, r7
 8000910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000914:	4770      	bx	lr

08000916 <CAN_ITConfig>:
  * @param  NewState: new state of the CAN interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void CAN_ITConfig(CAN_TypeDef* CANx, uint32_t CAN_IT, FunctionalState NewState)
{
 8000916:	b480      	push	{r7}
 8000918:	b085      	sub	sp, #20
 800091a:	af00      	add	r7, sp, #0
 800091c:	60f8      	str	r0, [r7, #12]
 800091e:	60b9      	str	r1, [r7, #8]
 8000920:	4613      	mov	r3, r2
 8000922:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_IT(CAN_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000924:	79fb      	ldrb	r3, [r7, #7]
 8000926:	2b00      	cmp	r3, #0
 8000928:	d006      	beq.n	8000938 <CAN_ITConfig+0x22>
  {
    /* Enable the selected CANx interrupt */
    CANx->IER |= CAN_IT;
 800092a:	68fb      	ldr	r3, [r7, #12]
 800092c:	695a      	ldr	r2, [r3, #20]
 800092e:	68bb      	ldr	r3, [r7, #8]
 8000930:	431a      	orrs	r2, r3
 8000932:	68fb      	ldr	r3, [r7, #12]
 8000934:	615a      	str	r2, [r3, #20]
  else
  {
    /* Disable the selected CANx interrupt */
    CANx->IER &= ~CAN_IT;
  }
}
 8000936:	e006      	b.n	8000946 <CAN_ITConfig+0x30>
    CANx->IER &= ~CAN_IT;
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	695a      	ldr	r2, [r3, #20]
 800093c:	68bb      	ldr	r3, [r7, #8]
 800093e:	43db      	mvns	r3, r3
 8000940:	401a      	ands	r2, r3
 8000942:	68fb      	ldr	r3, [r7, #12]
 8000944:	615a      	str	r2, [r3, #20]
}
 8000946:	bf00      	nop
 8000948:	3714      	adds	r7, #20
 800094a:	46bd      	mov	sp, r7
 800094c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000950:	4770      	bx	lr

08000952 <CAN_GetFlagStatus>:
  *            @arg CAN_FLAG_BOF: Bus-Off Flag    
  *            @arg CAN_FLAG_LEC: Last error code Flag      
  * @retval The new state of CAN_FLAG (SET or RESET).
  */
FlagStatus CAN_GetFlagStatus(CAN_TypeDef* CANx, uint32_t CAN_FLAG)
{
 8000952:	b480      	push	{r7}
 8000954:	b085      	sub	sp, #20
 8000956:	af00      	add	r7, sp, #0
 8000958:	6078      	str	r0, [r7, #4]
 800095a:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 800095c:	2300      	movs	r3, #0
 800095e:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_GET_FLAG(CAN_FLAG));
  

  if((CAN_FLAG & CAN_FLAGS_ESR) != (uint32_t)RESET)
 8000960:	683b      	ldr	r3, [r7, #0]
 8000962:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
 8000966:	2b00      	cmp	r3, #0
 8000968:	d00d      	beq.n	8000986 <CAN_GetFlagStatus+0x34>
  { 
    /* Check the status of the specified CAN flag */
    if ((CANx->ESR & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	699a      	ldr	r2, [r3, #24]
 800096e:	683b      	ldr	r3, [r7, #0]
 8000970:	4013      	ands	r3, r2
 8000972:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000976:	2b00      	cmp	r3, #0
 8000978:	d002      	beq.n	8000980 <CAN_GetFlagStatus+0x2e>
    { 
      /* CAN_FLAG is set */
      bitstatus = SET;
 800097a:	2301      	movs	r3, #1
 800097c:	73fb      	strb	r3, [r7, #15]
 800097e:	e048      	b.n	8000a12 <CAN_GetFlagStatus+0xc0>
    }
    else
    { 
      /* CAN_FLAG is reset */
      bitstatus = RESET;
 8000980:	2300      	movs	r3, #0
 8000982:	73fb      	strb	r3, [r7, #15]
 8000984:	e045      	b.n	8000a12 <CAN_GetFlagStatus+0xc0>
    }
  }
  else if((CAN_FLAG & CAN_FLAGS_MSR) != (uint32_t)RESET)
 8000986:	683b      	ldr	r3, [r7, #0]
 8000988:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800098c:	2b00      	cmp	r3, #0
 800098e:	d00d      	beq.n	80009ac <CAN_GetFlagStatus+0x5a>
  { 
    /* Check the status of the specified CAN flag */
    if ((CANx->MSR & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	685a      	ldr	r2, [r3, #4]
 8000994:	683b      	ldr	r3, [r7, #0]
 8000996:	4013      	ands	r3, r2
 8000998:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800099c:	2b00      	cmp	r3, #0
 800099e:	d002      	beq.n	80009a6 <CAN_GetFlagStatus+0x54>
    { 
      /* CAN_FLAG is set */
      bitstatus = SET;
 80009a0:	2301      	movs	r3, #1
 80009a2:	73fb      	strb	r3, [r7, #15]
 80009a4:	e035      	b.n	8000a12 <CAN_GetFlagStatus+0xc0>
    }
    else
    { 
      /* CAN_FLAG is reset */
      bitstatus = RESET;
 80009a6:	2300      	movs	r3, #0
 80009a8:	73fb      	strb	r3, [r7, #15]
 80009aa:	e032      	b.n	8000a12 <CAN_GetFlagStatus+0xc0>
    }
  }
  else if((CAN_FLAG & CAN_FLAGS_TSR) != (uint32_t)RESET)
 80009ac:	683b      	ldr	r3, [r7, #0]
 80009ae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d00d      	beq.n	80009d2 <CAN_GetFlagStatus+0x80>
  { 
    /* Check the status of the specified CAN flag */
    if ((CANx->TSR & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	689a      	ldr	r2, [r3, #8]
 80009ba:	683b      	ldr	r3, [r7, #0]
 80009bc:	4013      	ands	r3, r2
 80009be:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d002      	beq.n	80009cc <CAN_GetFlagStatus+0x7a>
    { 
      /* CAN_FLAG is set */
      bitstatus = SET;
 80009c6:	2301      	movs	r3, #1
 80009c8:	73fb      	strb	r3, [r7, #15]
 80009ca:	e022      	b.n	8000a12 <CAN_GetFlagStatus+0xc0>
    }
    else
    { 
      /* CAN_FLAG is reset */
      bitstatus = RESET;
 80009cc:	2300      	movs	r3, #0
 80009ce:	73fb      	strb	r3, [r7, #15]
 80009d0:	e01f      	b.n	8000a12 <CAN_GetFlagStatus+0xc0>
    }
  }
  else if((CAN_FLAG & CAN_FLAGS_RF0R) != (uint32_t)RESET)
 80009d2:	683b      	ldr	r3, [r7, #0]
 80009d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d00d      	beq.n	80009f8 <CAN_GetFlagStatus+0xa6>
  { 
    /* Check the status of the specified CAN flag */
    if ((CANx->RF0R & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	68da      	ldr	r2, [r3, #12]
 80009e0:	683b      	ldr	r3, [r7, #0]
 80009e2:	4013      	ands	r3, r2
 80009e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d002      	beq.n	80009f2 <CAN_GetFlagStatus+0xa0>
    { 
      /* CAN_FLAG is set */
      bitstatus = SET;
 80009ec:	2301      	movs	r3, #1
 80009ee:	73fb      	strb	r3, [r7, #15]
 80009f0:	e00f      	b.n	8000a12 <CAN_GetFlagStatus+0xc0>
    }
    else
    { 
      /* CAN_FLAG is reset */
      bitstatus = RESET;
 80009f2:	2300      	movs	r3, #0
 80009f4:	73fb      	strb	r3, [r7, #15]
 80009f6:	e00c      	b.n	8000a12 <CAN_GetFlagStatus+0xc0>
    }
  }
  else /* If(CAN_FLAG & CAN_FLAGS_RF1R != (uint32_t)RESET) */
  { 
    /* Check the status of the specified CAN flag */
    if ((uint32_t)(CANx->RF1R & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	691a      	ldr	r2, [r3, #16]
 80009fc:	683b      	ldr	r3, [r7, #0]
 80009fe:	4013      	ands	r3, r2
 8000a00:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d002      	beq.n	8000a0e <CAN_GetFlagStatus+0xbc>
    { 
      /* CAN_FLAG is set */
      bitstatus = SET;
 8000a08:	2301      	movs	r3, #1
 8000a0a:	73fb      	strb	r3, [r7, #15]
 8000a0c:	e001      	b.n	8000a12 <CAN_GetFlagStatus+0xc0>
    }
    else
    { 
      /* CAN_FLAG is reset */
      bitstatus = RESET;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	73fb      	strb	r3, [r7, #15]
    }
  }
  /* Return the CAN_FLAG status */
  return  bitstatus;
 8000a12:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a14:	4618      	mov	r0, r3
 8000a16:	3714      	adds	r7, #20
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1e:	4770      	bx	lr

08000a20 <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 8000a20:	b480      	push	{r7}
 8000a22:	b085      	sub	sp, #20
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
 8000a2c:	4b34      	ldr	r3, [pc, #208]	; (8000b00 <EXTI_Init+0xe0>)
 8000a2e:	60fb      	str	r3, [r7, #12]
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	799b      	ldrb	r3, [r3, #6]
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d04f      	beq.n	8000ad8 <EXTI_Init+0xb8>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 8000a38:	4931      	ldr	r1, [pc, #196]	; (8000b00 <EXTI_Init+0xe0>)
 8000a3a:	4b31      	ldr	r3, [pc, #196]	; (8000b00 <EXTI_Init+0xe0>)
 8000a3c:	681a      	ldr	r2, [r3, #0]
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	43db      	mvns	r3, r3
 8000a44:	4013      	ands	r3, r2
 8000a46:	600b      	str	r3, [r1, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 8000a48:	492d      	ldr	r1, [pc, #180]	; (8000b00 <EXTI_Init+0xe0>)
 8000a4a:	4b2d      	ldr	r3, [pc, #180]	; (8000b00 <EXTI_Init+0xe0>)
 8000a4c:	685a      	ldr	r2, [r3, #4]
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	43db      	mvns	r3, r3
 8000a54:	4013      	ands	r3, r2
 8000a56:	604b      	str	r3, [r1, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	791b      	ldrb	r3, [r3, #4]
 8000a5c:	461a      	mov	r2, r3
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	4413      	add	r3, r2
 8000a62:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	68fa      	ldr	r2, [r7, #12]
 8000a68:	6811      	ldr	r1, [r2, #0]
 8000a6a:	687a      	ldr	r2, [r7, #4]
 8000a6c:	6812      	ldr	r2, [r2, #0]
 8000a6e:	430a      	orrs	r2, r1
 8000a70:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 8000a72:	4923      	ldr	r1, [pc, #140]	; (8000b00 <EXTI_Init+0xe0>)
 8000a74:	4b22      	ldr	r3, [pc, #136]	; (8000b00 <EXTI_Init+0xe0>)
 8000a76:	689a      	ldr	r2, [r3, #8]
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	43db      	mvns	r3, r3
 8000a7e:	4013      	ands	r3, r2
 8000a80:	608b      	str	r3, [r1, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 8000a82:	491f      	ldr	r1, [pc, #124]	; (8000b00 <EXTI_Init+0xe0>)
 8000a84:	4b1e      	ldr	r3, [pc, #120]	; (8000b00 <EXTI_Init+0xe0>)
 8000a86:	68da      	ldr	r2, [r3, #12]
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	43db      	mvns	r3, r3
 8000a8e:	4013      	ands	r3, r2
 8000a90:	60cb      	str	r3, [r1, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	795b      	ldrb	r3, [r3, #5]
 8000a96:	2b10      	cmp	r3, #16
 8000a98:	d10e      	bne.n	8000ab8 <EXTI_Init+0x98>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 8000a9a:	4919      	ldr	r1, [pc, #100]	; (8000b00 <EXTI_Init+0xe0>)
 8000a9c:	4b18      	ldr	r3, [pc, #96]	; (8000b00 <EXTI_Init+0xe0>)
 8000a9e:	689a      	ldr	r2, [r3, #8]
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	4313      	orrs	r3, r2
 8000aa6:	608b      	str	r3, [r1, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 8000aa8:	4915      	ldr	r1, [pc, #84]	; (8000b00 <EXTI_Init+0xe0>)
 8000aaa:	4b15      	ldr	r3, [pc, #84]	; (8000b00 <EXTI_Init+0xe0>)
 8000aac:	68da      	ldr	r2, [r3, #12]
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	4313      	orrs	r3, r2
 8000ab4:	60cb      	str	r3, [r1, #12]
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
 8000ab6:	e01d      	b.n	8000af4 <EXTI_Init+0xd4>
      tmp = (uint32_t)EXTI_BASE;
 8000ab8:	4b11      	ldr	r3, [pc, #68]	; (8000b00 <EXTI_Init+0xe0>)
 8000aba:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	795b      	ldrb	r3, [r3, #5]
 8000ac0:	461a      	mov	r2, r3
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	4413      	add	r3, r2
 8000ac6:	60fb      	str	r3, [r7, #12]
      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	68fa      	ldr	r2, [r7, #12]
 8000acc:	6811      	ldr	r1, [r2, #0]
 8000ace:	687a      	ldr	r2, [r7, #4]
 8000ad0:	6812      	ldr	r2, [r2, #0]
 8000ad2:	430a      	orrs	r2, r1
 8000ad4:	601a      	str	r2, [r3, #0]
}
 8000ad6:	e00d      	b.n	8000af4 <EXTI_Init+0xd4>
    tmp += EXTI_InitStruct->EXTI_Mode;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	791b      	ldrb	r3, [r3, #4]
 8000adc:	461a      	mov	r2, r3
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	4413      	add	r3, r2
 8000ae2:	60fb      	str	r3, [r7, #12]
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	68fa      	ldr	r2, [r7, #12]
 8000ae8:	6811      	ldr	r1, [r2, #0]
 8000aea:	687a      	ldr	r2, [r7, #4]
 8000aec:	6812      	ldr	r2, [r2, #0]
 8000aee:	43d2      	mvns	r2, r2
 8000af0:	400a      	ands	r2, r1
 8000af2:	601a      	str	r2, [r3, #0]
}
 8000af4:	bf00      	nop
 8000af6:	3714      	adds	r7, #20
 8000af8:	46bd      	mov	sp, r7
 8000afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afe:	4770      	bx	lr
 8000b00:	40013c00 	.word	0x40013c00

08000b04 <EXTI_GetITStatus>:
  * @param  EXTI_Line: specifies the EXTI line to check.
  *          This parameter can be EXTI_Linex where x can be(0..22)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
 8000b04:	b480      	push	{r7}
 8000b06:	b085      	sub	sp, #20
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
 8000b10:	2300      	movs	r3, #0
 8000b12:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  enablestatus =  EXTI->IMR & EXTI_Line;
 8000b14:	4b0c      	ldr	r3, [pc, #48]	; (8000b48 <EXTI_GetITStatus+0x44>)
 8000b16:	681a      	ldr	r2, [r3, #0]
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	4013      	ands	r3, r2
 8000b1c:	60bb      	str	r3, [r7, #8]
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 8000b1e:	4b0a      	ldr	r3, [pc, #40]	; (8000b48 <EXTI_GetITStatus+0x44>)
 8000b20:	695a      	ldr	r2, [r3, #20]
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	4013      	ands	r3, r2
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d005      	beq.n	8000b36 <EXTI_GetITStatus+0x32>
 8000b2a:	68bb      	ldr	r3, [r7, #8]
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d002      	beq.n	8000b36 <EXTI_GetITStatus+0x32>
  {
    bitstatus = SET;
 8000b30:	2301      	movs	r3, #1
 8000b32:	73fb      	strb	r3, [r7, #15]
 8000b34:	e001      	b.n	8000b3a <EXTI_GetITStatus+0x36>
  }
  else
  {
    bitstatus = RESET;
 8000b36:	2300      	movs	r3, #0
 8000b38:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000b3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	3714      	adds	r7, #20
 8000b40:	46bd      	mov	sp, r7
 8000b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b46:	4770      	bx	lr
 8000b48:	40013c00 	.word	0x40013c00

08000b4c <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *          This parameter can be any combination of EXTI_Linex where x can be (0..22)
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b083      	sub	sp, #12
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 8000b54:	4a04      	ldr	r2, [pc, #16]	; (8000b68 <EXTI_ClearITPendingBit+0x1c>)
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	6153      	str	r3, [r2, #20]
}
 8000b5a:	bf00      	nop
 8000b5c:	370c      	adds	r7, #12
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop
 8000b68:	40013c00 	.word	0x40013c00

08000b6c <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b087      	sub	sp, #28
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
 8000b74:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8000b76:	2300      	movs	r3, #0
 8000b78:	617b      	str	r3, [r7, #20]
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	613b      	str	r3, [r7, #16]
 8000b7e:	2300      	movs	r3, #0
 8000b80:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000b82:	2300      	movs	r3, #0
 8000b84:	617b      	str	r3, [r7, #20]
 8000b86:	e076      	b.n	8000c76 <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000b88:	2201      	movs	r2, #1
 8000b8a:	697b      	ldr	r3, [r7, #20]
 8000b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b90:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	681a      	ldr	r2, [r3, #0]
 8000b96:	693b      	ldr	r3, [r7, #16]
 8000b98:	4013      	ands	r3, r2
 8000b9a:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8000b9c:	68fa      	ldr	r2, [r7, #12]
 8000b9e:	693b      	ldr	r3, [r7, #16]
 8000ba0:	429a      	cmp	r2, r3
 8000ba2:	d165      	bne.n	8000c70 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681a      	ldr	r2, [r3, #0]
 8000ba8:	697b      	ldr	r3, [r7, #20]
 8000baa:	005b      	lsls	r3, r3, #1
 8000bac:	2103      	movs	r1, #3
 8000bae:	fa01 f303 	lsl.w	r3, r1, r3
 8000bb2:	43db      	mvns	r3, r3
 8000bb4:	401a      	ands	r2, r3
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	681a      	ldr	r2, [r3, #0]
 8000bbe:	683b      	ldr	r3, [r7, #0]
 8000bc0:	791b      	ldrb	r3, [r3, #4]
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	697b      	ldr	r3, [r7, #20]
 8000bc6:	005b      	lsls	r3, r3, #1
 8000bc8:	fa01 f303 	lsl.w	r3, r1, r3
 8000bcc:	431a      	orrs	r2, r3
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	791b      	ldrb	r3, [r3, #4]
 8000bd6:	2b01      	cmp	r3, #1
 8000bd8:	d003      	beq.n	8000be2 <GPIO_Init+0x76>
 8000bda:	683b      	ldr	r3, [r7, #0]
 8000bdc:	791b      	ldrb	r3, [r3, #4]
 8000bde:	2b02      	cmp	r3, #2
 8000be0:	d12e      	bne.n	8000c40 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	689a      	ldr	r2, [r3, #8]
 8000be6:	697b      	ldr	r3, [r7, #20]
 8000be8:	005b      	lsls	r3, r3, #1
 8000bea:	2103      	movs	r1, #3
 8000bec:	fa01 f303 	lsl.w	r3, r1, r3
 8000bf0:	43db      	mvns	r3, r3
 8000bf2:	401a      	ands	r2, r3
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	689a      	ldr	r2, [r3, #8]
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	795b      	ldrb	r3, [r3, #5]
 8000c00:	4619      	mov	r1, r3
 8000c02:	697b      	ldr	r3, [r7, #20]
 8000c04:	005b      	lsls	r3, r3, #1
 8000c06:	fa01 f303 	lsl.w	r3, r1, r3
 8000c0a:	431a      	orrs	r2, r3
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	685a      	ldr	r2, [r3, #4]
 8000c14:	697b      	ldr	r3, [r7, #20]
 8000c16:	b29b      	uxth	r3, r3
 8000c18:	4619      	mov	r1, r3
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	408b      	lsls	r3, r1
 8000c1e:	43db      	mvns	r3, r3
 8000c20:	401a      	ands	r2, r3
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	685b      	ldr	r3, [r3, #4]
 8000c2a:	683a      	ldr	r2, [r7, #0]
 8000c2c:	7992      	ldrb	r2, [r2, #6]
 8000c2e:	4611      	mov	r1, r2
 8000c30:	697a      	ldr	r2, [r7, #20]
 8000c32:	b292      	uxth	r2, r2
 8000c34:	fa01 f202 	lsl.w	r2, r1, r2
 8000c38:	b292      	uxth	r2, r2
 8000c3a:	431a      	orrs	r2, r3
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	68da      	ldr	r2, [r3, #12]
 8000c44:	697b      	ldr	r3, [r7, #20]
 8000c46:	b29b      	uxth	r3, r3
 8000c48:	005b      	lsls	r3, r3, #1
 8000c4a:	2103      	movs	r1, #3
 8000c4c:	fa01 f303 	lsl.w	r3, r1, r3
 8000c50:	43db      	mvns	r3, r3
 8000c52:	401a      	ands	r2, r3
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	68da      	ldr	r2, [r3, #12]
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	79db      	ldrb	r3, [r3, #7]
 8000c60:	4619      	mov	r1, r3
 8000c62:	697b      	ldr	r3, [r7, #20]
 8000c64:	005b      	lsls	r3, r3, #1
 8000c66:	fa01 f303 	lsl.w	r3, r1, r3
 8000c6a:	431a      	orrs	r2, r3
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000c70:	697b      	ldr	r3, [r7, #20]
 8000c72:	3301      	adds	r3, #1
 8000c74:	617b      	str	r3, [r7, #20]
 8000c76:	697b      	ldr	r3, [r7, #20]
 8000c78:	2b0f      	cmp	r3, #15
 8000c7a:	d985      	bls.n	8000b88 <GPIO_Init+0x1c>
    }
  }
}
 8000c7c:	bf00      	nop
 8000c7e:	371c      	adds	r7, #28
 8000c80:	46bd      	mov	sp, r7
 8000c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c86:	4770      	bx	lr

08000c88 <GPIO_WriteBit>:
  *            @arg Bit_RESET: to clear the port pin
  *            @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b083      	sub	sp, #12
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
 8000c90:	460b      	mov	r3, r1
 8000c92:	807b      	strh	r3, [r7, #2]
 8000c94:	4613      	mov	r3, r2
 8000c96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
 8000c98:	787b      	ldrb	r3, [r7, #1]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d003      	beq.n	8000ca6 <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRRL = GPIO_Pin;
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	887a      	ldrh	r2, [r7, #2]
 8000ca2:	831a      	strh	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
  }
}
 8000ca4:	e002      	b.n	8000cac <GPIO_WriteBit+0x24>
    GPIOx->BSRRH = GPIO_Pin ;
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	887a      	ldrh	r2, [r7, #2]
 8000caa:	835a      	strh	r2, [r3, #26]
}
 8000cac:	bf00      	nop
 8000cae:	370c      	adds	r7, #12
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr

08000cb8 <GPIO_ToggleBits>:
  *                STM32F40xx/41xx and STM32F427x/437x devices.  
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b083      	sub	sp, #12
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
 8000cc0:	460b      	mov	r3, r1
 8000cc2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR ^= GPIO_Pin;
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	695a      	ldr	r2, [r3, #20]
 8000cc8:	887b      	ldrh	r3, [r7, #2]
 8000cca:	405a      	eors	r2, r3
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	615a      	str	r2, [r3, #20]
}
 8000cd0:	bf00      	nop
 8000cd2:	370c      	adds	r7, #12
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cda:	4770      	bx	lr

08000cdc <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	b085      	sub	sp, #20
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
 8000ce4:	460b      	mov	r3, r1
 8000ce6:	807b      	strh	r3, [r7, #2]
 8000ce8:	4613      	mov	r3, r2
 8000cea:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 8000cec:	2300      	movs	r3, #0
 8000cee:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000cf4:	787a      	ldrb	r2, [r7, #1]
 8000cf6:	887b      	ldrh	r3, [r7, #2]
 8000cf8:	f003 0307 	and.w	r3, r3, #7
 8000cfc:	009b      	lsls	r3, r3, #2
 8000cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000d02:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000d04:	887b      	ldrh	r3, [r7, #2]
 8000d06:	08db      	lsrs	r3, r3, #3
 8000d08:	b29b      	uxth	r3, r3
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	887b      	ldrh	r3, [r7, #2]
 8000d0e:	08db      	lsrs	r3, r3, #3
 8000d10:	b29b      	uxth	r3, r3
 8000d12:	461a      	mov	r2, r3
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	3208      	adds	r2, #8
 8000d18:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000d1c:	887b      	ldrh	r3, [r7, #2]
 8000d1e:	f003 0307 	and.w	r3, r3, #7
 8000d22:	009b      	lsls	r3, r3, #2
 8000d24:	210f      	movs	r1, #15
 8000d26:	fa01 f303 	lsl.w	r3, r1, r3
 8000d2a:	43db      	mvns	r3, r3
 8000d2c:	ea02 0103 	and.w	r1, r2, r3
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	f100 0208 	add.w	r2, r0, #8
 8000d36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8000d3a:	887b      	ldrh	r3, [r7, #2]
 8000d3c:	08db      	lsrs	r3, r3, #3
 8000d3e:	b29b      	uxth	r3, r3
 8000d40:	461a      	mov	r2, r3
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	3208      	adds	r2, #8
 8000d46:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	4313      	orrs	r3, r2
 8000d4e:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8000d50:	887b      	ldrh	r3, [r7, #2]
 8000d52:	08db      	lsrs	r3, r3, #3
 8000d54:	b29b      	uxth	r3, r3
 8000d56:	461a      	mov	r2, r3
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	3208      	adds	r2, #8
 8000d5c:	68b9      	ldr	r1, [r7, #8]
 8000d5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000d62:	bf00      	nop
 8000d64:	3714      	adds	r7, #20
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr
	...

08000d70 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b083      	sub	sp, #12
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
 8000d78:	460b      	mov	r3, r1
 8000d7a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000d7c:	78fb      	ldrb	r3, [r7, #3]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d006      	beq.n	8000d90 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8000d82:	490a      	ldr	r1, [pc, #40]	; (8000dac <RCC_AHB1PeriphClockCmd+0x3c>)
 8000d84:	4b09      	ldr	r3, [pc, #36]	; (8000dac <RCC_AHB1PeriphClockCmd+0x3c>)
 8000d86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	4313      	orrs	r3, r2
 8000d8c:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 8000d8e:	e006      	b.n	8000d9e <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8000d90:	4906      	ldr	r1, [pc, #24]	; (8000dac <RCC_AHB1PeriphClockCmd+0x3c>)
 8000d92:	4b06      	ldr	r3, [pc, #24]	; (8000dac <RCC_AHB1PeriphClockCmd+0x3c>)
 8000d94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	43db      	mvns	r3, r3
 8000d9a:	4013      	ands	r3, r2
 8000d9c:	630b      	str	r3, [r1, #48]	; 0x30
}
 8000d9e:	bf00      	nop
 8000da0:	370c      	adds	r7, #12
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop
 8000dac:	40023800 	.word	0x40023800

08000db0 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b083      	sub	sp, #12
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
 8000db8:	460b      	mov	r3, r1
 8000dba:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000dbc:	78fb      	ldrb	r3, [r7, #3]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d006      	beq.n	8000dd0 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8000dc2:	490a      	ldr	r1, [pc, #40]	; (8000dec <RCC_APB1PeriphClockCmd+0x3c>)
 8000dc4:	4b09      	ldr	r3, [pc, #36]	; (8000dec <RCC_APB1PeriphClockCmd+0x3c>)
 8000dc6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	4313      	orrs	r3, r2
 8000dcc:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 8000dce:	e006      	b.n	8000dde <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8000dd0:	4906      	ldr	r1, [pc, #24]	; (8000dec <RCC_APB1PeriphClockCmd+0x3c>)
 8000dd2:	4b06      	ldr	r3, [pc, #24]	; (8000dec <RCC_APB1PeriphClockCmd+0x3c>)
 8000dd4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	43db      	mvns	r3, r3
 8000dda:	4013      	ands	r3, r2
 8000ddc:	640b      	str	r3, [r1, #64]	; 0x40
}
 8000dde:	bf00      	nop
 8000de0:	370c      	adds	r7, #12
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop
 8000dec:	40023800 	.word	0x40023800

08000df0 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b083      	sub	sp, #12
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
 8000df8:	460b      	mov	r3, r1
 8000dfa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000dfc:	78fb      	ldrb	r3, [r7, #3]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d006      	beq.n	8000e10 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8000e02:	490a      	ldr	r1, [pc, #40]	; (8000e2c <RCC_APB2PeriphClockCmd+0x3c>)
 8000e04:	4b09      	ldr	r3, [pc, #36]	; (8000e2c <RCC_APB2PeriphClockCmd+0x3c>)
 8000e06:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	4313      	orrs	r3, r2
 8000e0c:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8000e0e:	e006      	b.n	8000e1e <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8000e10:	4906      	ldr	r1, [pc, #24]	; (8000e2c <RCC_APB2PeriphClockCmd+0x3c>)
 8000e12:	4b06      	ldr	r3, [pc, #24]	; (8000e2c <RCC_APB2PeriphClockCmd+0x3c>)
 8000e14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	43db      	mvns	r3, r3
 8000e1a:	4013      	ands	r3, r2
 8000e1c:	644b      	str	r3, [r1, #68]	; 0x44
}
 8000e1e:	bf00      	nop
 8000e20:	370c      	adds	r7, #12
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop
 8000e2c:	40023800 	.word	0x40023800

08000e30 <SYSCFG_EXTILineConfig>:
  *           and STM32F427x/STM32F437x devices. 
  *             
  * @retval None
  */
void SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx, uint8_t EXTI_PinSourcex)
{
 8000e30:	b490      	push	{r4, r7}
 8000e32:	b084      	sub	sp, #16
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	4603      	mov	r3, r0
 8000e38:	460a      	mov	r2, r1
 8000e3a:	71fb      	strb	r3, [r7, #7]
 8000e3c:	4613      	mov	r3, r2
 8000e3e:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
 8000e40:	2300      	movs	r3, #0
 8000e42:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));

  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 8000e44:	79bb      	ldrb	r3, [r7, #6]
 8000e46:	f003 0303 	and.w	r3, r3, #3
 8000e4a:	009b      	lsls	r3, r3, #2
 8000e4c:	220f      	movs	r2, #15
 8000e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e52:	60fb      	str	r3, [r7, #12]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 8000e54:	4916      	ldr	r1, [pc, #88]	; (8000eb0 <SYSCFG_EXTILineConfig+0x80>)
 8000e56:	79bb      	ldrb	r3, [r7, #6]
 8000e58:	089b      	lsrs	r3, r3, #2
 8000e5a:	b2db      	uxtb	r3, r3
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	4a14      	ldr	r2, [pc, #80]	; (8000eb0 <SYSCFG_EXTILineConfig+0x80>)
 8000e60:	79bb      	ldrb	r3, [r7, #6]
 8000e62:	089b      	lsrs	r3, r3, #2
 8000e64:	b2db      	uxtb	r3, r3
 8000e66:	3302      	adds	r3, #2
 8000e68:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	43db      	mvns	r3, r3
 8000e70:	401a      	ands	r2, r3
 8000e72:	1c83      	adds	r3, r0, #2
 8000e74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
 8000e78:	480d      	ldr	r0, [pc, #52]	; (8000eb0 <SYSCFG_EXTILineConfig+0x80>)
 8000e7a:	79bb      	ldrb	r3, [r7, #6]
 8000e7c:	089b      	lsrs	r3, r3, #2
 8000e7e:	b2db      	uxtb	r3, r3
 8000e80:	461c      	mov	r4, r3
 8000e82:	4a0b      	ldr	r2, [pc, #44]	; (8000eb0 <SYSCFG_EXTILineConfig+0x80>)
 8000e84:	79bb      	ldrb	r3, [r7, #6]
 8000e86:	089b      	lsrs	r3, r3, #2
 8000e88:	b2db      	uxtb	r3, r3
 8000e8a:	3302      	adds	r3, #2
 8000e8c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000e90:	79f9      	ldrb	r1, [r7, #7]
 8000e92:	79bb      	ldrb	r3, [r7, #6]
 8000e94:	f003 0303 	and.w	r3, r3, #3
 8000e98:	009b      	lsls	r3, r3, #2
 8000e9a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e9e:	431a      	orrs	r2, r3
 8000ea0:	1ca3      	adds	r3, r4, #2
 8000ea2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8000ea6:	bf00      	nop
 8000ea8:	3710      	adds	r7, #16
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bc90      	pop	{r4, r7}
 8000eae:	4770      	bx	lr
 8000eb0:	40013800 	.word	0x40013800

08000eb4 <msDelay>:
void CAN_Configuration(void);
void CANEXT_Intteruption(void);
void msDelay(uint32_t msTime);

void msDelay(uint32_t msTime)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b085      	sub	sp, #20
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
	for(uint32_t i=0; i<msTime*2000;i++);
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	60fb      	str	r3, [r7, #12]
 8000ec0:	e002      	b.n	8000ec8 <msDelay+0x14>
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	3301      	adds	r3, #1
 8000ec6:	60fb      	str	r3, [r7, #12]
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000ece:	fb02 f203 	mul.w	r2, r2, r3
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	429a      	cmp	r2, r3
 8000ed6:	d8f4      	bhi.n	8000ec2 <msDelay+0xe>
}
 8000ed8:	bf00      	nop
 8000eda:	3714      	adds	r7, #20
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr

08000ee4 <main>:

int main(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
	// Enable Peripherie-Cores:

	SystemInit();
 8000ee8:	f000 fa16 	bl	8001318 <SystemInit>

	// Call programmed functions:
	PIN_Configuration();
 8000eec:	f000 f806 	bl	8000efc <PIN_Configuration>
	CAN_Configuration();
 8000ef0:	f000 f86c 	bl	8000fcc <CAN_Configuration>
	CANEXT_Intteruption();
 8000ef4:	f000 f8a4 	bl	8001040 <CANEXT_Intteruption>
    Wait For Interrupt is a hint instruction that suspends execution
    until one of a number of events occurs.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __WFI(void)
{
  __ASM volatile ("wfi");
 8000ef8:	bf30      	wfi

  while (1)
  {
	  //Standby Mode:
	__WFI();
 8000efa:	e7fd      	b.n	8000ef8 <main+0x14>

08000efc <PIN_Configuration>:

  }
}
//Pin configuration (Port D/A):
void PIN_Configuration(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b088      	sub	sp, #32
 8000f00:	af00      	add	r7, sp, #0
	// Activation of the clocks for GPIO Port D:
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 8000f02:	2101      	movs	r1, #1
 8000f04:	2008      	movs	r0, #8
 8000f06:	f7ff ff33 	bl	8000d70 <RCC_AHB1PeriphClockCmd>
	// Activation of the clocks for GPIO Port A:
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 8000f0a:	2101      	movs	r1, #1
 8000f0c:	2001      	movs	r0, #1
 8000f0e:	f7ff ff2f 	bl	8000d70 <RCC_AHB1PeriphClockCmd>


	GPIO_InitTypeDef GPIO_Config;
	// GPIO configuration for the green LED:
	GPIO_Config.GPIO_Mode = GPIO_Mode_OUT;
 8000f12:	2301      	movs	r3, #1
 8000f14:	773b      	strb	r3, [r7, #28]
	GPIO_Config.GPIO_OType = GPIO_OType_PP;
 8000f16:	2300      	movs	r3, #0
 8000f18:	77bb      	strb	r3, [r7, #30]
	GPIO_Config.GPIO_Pin = GPIO_Pin_12;
 8000f1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f1e:	61bb      	str	r3, [r7, #24]
	GPIO_Config.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8000f20:	2300      	movs	r3, #0
 8000f22:	77fb      	strb	r3, [r7, #31]
	GPIO_Config.GPIO_Speed = GPIO_Speed_25MHz;
 8000f24:	2301      	movs	r3, #1
 8000f26:	777b      	strb	r3, [r7, #29]
	GPIO_Init(GPIOD, &GPIO_Config);
 8000f28:	f107 0318 	add.w	r3, r7, #24
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	4825      	ldr	r0, [pc, #148]	; (8000fc4 <PIN_Configuration+0xc8>)
 8000f30:	f7ff fe1c 	bl	8000b6c <GPIO_Init>


	//only for testing purposes: will quickly switch on and off each time the user btn is pressed
	GPIO_InitTypeDef GPIO_LEDblue;
	GPIO_LEDblue.GPIO_Pin = GPIO_Pin_15;
 8000f34:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f38:	613b      	str	r3, [r7, #16]
	GPIO_LEDblue.GPIO_Mode = GPIO_Mode_OUT;
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	753b      	strb	r3, [r7, #20]
	GPIO_LEDblue.GPIO_OType = GPIO_OType_PP;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	75bb      	strb	r3, [r7, #22]
	GPIO_LEDblue.GPIO_Speed = GPIO_Speed_50MHz ;
 8000f42:	2302      	movs	r3, #2
 8000f44:	757b      	strb	r3, [r7, #21]
	GPIO_Init(GPIOD,&GPIO_LEDblue);
 8000f46:	f107 0310 	add.w	r3, r7, #16
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	481d      	ldr	r0, [pc, #116]	; (8000fc4 <PIN_Configuration+0xc8>)
 8000f4e:	f7ff fe0d 	bl	8000b6c <GPIO_Init>

	//only for testing purposes: will turn on and off each time can1 receives msgid 0x42
	GPIO_InitTypeDef GPIO_LEDorange;
	GPIO_LEDorange.GPIO_Pin = GPIO_Pin_13;
 8000f52:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f56:	60bb      	str	r3, [r7, #8]
	GPIO_LEDorange.GPIO_Mode = GPIO_Mode_OUT;
 8000f58:	2301      	movs	r3, #1
 8000f5a:	733b      	strb	r3, [r7, #12]
	GPIO_LEDorange.GPIO_OType = GPIO_OType_PP;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	73bb      	strb	r3, [r7, #14]
	GPIO_LEDorange.GPIO_Speed = GPIO_Speed_50MHz ;
 8000f60:	2302      	movs	r3, #2
 8000f62:	737b      	strb	r3, [r7, #13]
	GPIO_Init(GPIOD,&GPIO_LEDorange);
 8000f64:	f107 0308 	add.w	r3, r7, #8
 8000f68:	4619      	mov	r1, r3
 8000f6a:	4816      	ldr	r0, [pc, #88]	; (8000fc4 <PIN_Configuration+0xc8>)
 8000f6c:	f7ff fdfe 	bl	8000b6c <GPIO_Init>


	// GPIO configuration for the can:
	GPIO_Config.GPIO_Mode = GPIO_Mode_AF;
 8000f70:	2302      	movs	r3, #2
 8000f72:	773b      	strb	r3, [r7, #28]
	GPIO_Config.GPIO_OType = GPIO_OType_PP;
 8000f74:	2300      	movs	r3, #0
 8000f76:	77bb      	strb	r3, [r7, #30]
	GPIO_Config.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1;
 8000f78:	2303      	movs	r3, #3
 8000f7a:	61bb      	str	r3, [r7, #24]
	GPIO_Config.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	77fb      	strb	r3, [r7, #31]
	GPIO_Config.GPIO_Speed = GPIO_Speed_25MHz;
 8000f80:	2301      	movs	r3, #1
 8000f82:	777b      	strb	r3, [r7, #29]
	GPIO_Init(GPIOD, &GPIO_Config);
 8000f84:	f107 0318 	add.w	r3, r7, #24
 8000f88:	4619      	mov	r1, r3
 8000f8a:	480e      	ldr	r0, [pc, #56]	; (8000fc4 <PIN_Configuration+0xc8>)
 8000f8c:	f7ff fdee 	bl	8000b6c <GPIO_Init>
	// Connection between can and pin:
	GPIO_PinAFConfig(GPIOD, GPIO_PinSource0, GPIO_AF_CAN1);
 8000f90:	2209      	movs	r2, #9
 8000f92:	2100      	movs	r1, #0
 8000f94:	480b      	ldr	r0, [pc, #44]	; (8000fc4 <PIN_Configuration+0xc8>)
 8000f96:	f7ff fea1 	bl	8000cdc <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOD, GPIO_PinSource1, GPIO_AF_CAN1);
 8000f9a:	2209      	movs	r2, #9
 8000f9c:	2101      	movs	r1, #1
 8000f9e:	4809      	ldr	r0, [pc, #36]	; (8000fc4 <PIN_Configuration+0xc8>)
 8000fa0:	f7ff fe9c 	bl	8000cdc <GPIO_PinAFConfig>

	GPIO_InitTypeDef GPIOA_Config;
	// GPIO configuration for the User Button:
    GPIOA_Config.GPIO_Mode = GPIO_Mode_IN;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	713b      	strb	r3, [r7, #4]
	GPIOA_Config.GPIO_Pin = GPIO_Pin_0;
 8000fa8:	2301      	movs	r3, #1
 8000faa:	603b      	str	r3, [r7, #0]
	GPIOA_Config.GPIO_PuPd = GPIO_PuPd_DOWN;
 8000fac:	2302      	movs	r3, #2
 8000fae:	71fb      	strb	r3, [r7, #7]
	GPIO_Init(GPIOA, &GPIOA_Config);
 8000fb0:	463b      	mov	r3, r7
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	4804      	ldr	r0, [pc, #16]	; (8000fc8 <PIN_Configuration+0xcc>)
 8000fb6:	f7ff fdd9 	bl	8000b6c <GPIO_Init>



}
 8000fba:	bf00      	nop
 8000fbc:	3720      	adds	r7, #32
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	40020c00 	.word	0x40020c00
 8000fc8:	40020000 	.word	0x40020000

08000fcc <CAN_Configuration>:

// CAN configuration for CAN1:
void CAN_Configuration(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b088      	sub	sp, #32
 8000fd0:	af00      	add	r7, sp, #0
	// Enable the clock for CAN1:
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_CAN1, ENABLE);
 8000fd2:	2101      	movs	r1, #1
 8000fd4:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8000fd8:	f7ff feea 	bl	8000db0 <RCC_APB1PeriphClockCmd>

	// configuration for CAN:
	CAN_InitTypeDef CAN_Config;
	CAN_StructInit(&CAN_Config);
 8000fdc:	f107 0314 	add.w	r3, r7, #20
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f7ff fae1 	bl	80005a8 <CAN_StructInit>
	//Baudrate setting to 250Kbit/s
	CAN_Config.CAN_SJW = CAN_SJW_1tq;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	75fb      	strb	r3, [r7, #23]
	CAN_Config.CAN_BS1 = CAN_BS1_12tq;
 8000fea:	230b      	movs	r3, #11
 8000fec:	763b      	strb	r3, [r7, #24]
	CAN_Config.CAN_BS2 = CAN_BS2_5tq;
 8000fee:	2304      	movs	r3, #4
 8000ff0:	767b      	strb	r3, [r7, #25]
	CAN_Config.CAN_Prescaler = 16;
 8000ff2:	2310      	movs	r3, #16
 8000ff4:	82bb      	strh	r3, [r7, #20]
	CAN_Config.CAN_Mode = 0x01;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	75bb      	strb	r3, [r7, #22]
	CAN_Init(CAN1, &CAN_Config);
 8000ffa:	f107 0314 	add.w	r3, r7, #20
 8000ffe:	4619      	mov	r1, r3
 8001000:	480e      	ldr	r0, [pc, #56]	; (800103c <CAN_Configuration+0x70>)
 8001002:	f7ff f943 	bl	800028c <CAN_Init>

	//Creating a filter which enables the reception of messages

	CAN_FilterInitTypeDef CAN_Filter;
	CAN_Filter.CAN_FilterActivation = ENABLE;
 8001006:	2301      	movs	r3, #1
 8001008:	747b      	strb	r3, [r7, #17]
	CAN_Filter.CAN_FilterFIFOAssignment = CAN_Filter_FIFO0;
 800100a:	2300      	movs	r3, #0
 800100c:	81bb      	strh	r3, [r7, #12]
	CAN_Filter.CAN_FilterIdHigh = 0;
 800100e:	2300      	movs	r3, #0
 8001010:	80bb      	strh	r3, [r7, #4]
	CAN_Filter.CAN_FilterIdLow = 0;
 8001012:	2300      	movs	r3, #0
 8001014:	80fb      	strh	r3, [r7, #6]
	CAN_Filter.CAN_FilterMaskIdHigh = 0;
 8001016:	2300      	movs	r3, #0
 8001018:	813b      	strh	r3, [r7, #8]
	CAN_Filter.CAN_FilterMaskIdLow = 0;
 800101a:	2300      	movs	r3, #0
 800101c:	817b      	strh	r3, [r7, #10]
	CAN_Filter.CAN_FilterMode = CAN_FilterMode_IdMask;
 800101e:	2300      	movs	r3, #0
 8001020:	73fb      	strb	r3, [r7, #15]
	CAN_Filter.CAN_FilterNumber = 0;
 8001022:	2300      	movs	r3, #0
 8001024:	73bb      	strb	r3, [r7, #14]
	CAN_Filter.CAN_FilterScale = CAN_FilterScale_32bit;
 8001026:	2301      	movs	r3, #1
 8001028:	743b      	strb	r3, [r7, #16]
	CAN_FilterInit(&CAN_Filter);
 800102a:	1d3b      	adds	r3, r7, #4
 800102c:	4618      	mov	r0, r3
 800102e:	f7ff f9ff 	bl	8000430 <CAN_FilterInit>
}
 8001032:	bf00      	nop
 8001034:	3720      	adds	r7, #32
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	40006400 	.word	0x40006400

08001040 <CANEXT_Intteruption>:

// Function for CAN1 & EXTI0 Interrupt:

void CANEXT_Intteruption(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b084      	sub	sp, #16
 8001044:	af00      	add	r7, sp, #0
	// Enable Can interrupt:
	CAN_ITConfig(CAN1, CAN_IT_FMP0, ENABLE);
 8001046:	2201      	movs	r2, #1
 8001048:	2102      	movs	r1, #2
 800104a:	481a      	ldr	r0, [pc, #104]	; (80010b4 <CANEXT_Intteruption+0x74>)
 800104c:	f7ff fc63 	bl	8000916 <CAN_ITConfig>

	// Configuration CAN interrupt control:
	NVIC_InitTypeDef NVICCAN_Config;

	NVICCAN_Config.NVIC_IRQChannel = CAN1_RX0_IRQn ;
 8001050:	2314      	movs	r3, #20
 8001052:	733b      	strb	r3, [r7, #12]
	NVICCAN_Config.NVIC_IRQChannelCmd = ENABLE;
 8001054:	2301      	movs	r3, #1
 8001056:	73fb      	strb	r3, [r7, #15]
	NVICCAN_Config.NVIC_IRQChannelPreemptionPriority = 2;
 8001058:	2302      	movs	r3, #2
 800105a:	737b      	strb	r3, [r7, #13]
	NVICCAN_Config.NVIC_IRQChannelSubPriority = 1;
 800105c:	2301      	movs	r3, #1
 800105e:	73bb      	strb	r3, [r7, #14]
	NVIC_Init(&NVICCAN_Config);
 8001060:	f107 030c 	add.w	r3, r7, #12
 8001064:	4618      	mov	r0, r3
 8001066:	f7ff f8af 	bl	80001c8 <NVIC_Init>

	// Enable clock for SYSCFG */
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 800106a:	2101      	movs	r1, #1
 800106c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001070:	f7ff febe 	bl	8000df0 <RCC_APB2PeriphClockCmd>

	// Tell system that you will use PA0 for EXTI_Line0 */
    SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOA, EXTI_PinSource0);
 8001074:	2100      	movs	r1, #0
 8001076:	2000      	movs	r0, #0
 8001078:	f7ff feda 	bl	8000e30 <SYSCFG_EXTILineConfig>

   	EXTI_InitTypeDef EXTI_Config;
   	// PA0 is connected to EXTI_Line0
   	EXTI_Config.EXTI_Line = EXTI_Line0;
 800107c:	2301      	movs	r3, #1
 800107e:	607b      	str	r3, [r7, #4]
   	// Enable interrupt
   	EXTI_Config.EXTI_LineCmd = ENABLE;
 8001080:	2301      	movs	r3, #1
 8001082:	72bb      	strb	r3, [r7, #10]
   	// Interrupt mode
   	EXTI_Config.EXTI_Mode = EXTI_Mode_Interrupt;
 8001084:	2300      	movs	r3, #0
 8001086:	723b      	strb	r3, [r7, #8]
   	// Triggers on rising and falling edge
   	EXTI_Config.EXTI_Trigger = EXTI_Trigger_Rising_Falling;
 8001088:	2310      	movs	r3, #16
 800108a:	727b      	strb	r3, [r7, #9]
   	// Add to EXTI
   	EXTI_Init(&EXTI_Config);
 800108c:	1d3b      	adds	r3, r7, #4
 800108e:	4618      	mov	r0, r3
 8001090:	f7ff fcc6 	bl	8000a20 <EXTI_Init>

	// Configuration EXTI0 interrupt control:

   	NVIC_InitTypeDef NVICEXTI0_Config;
	NVICEXTI0_Config.NVIC_IRQChannel = EXTI0_IRQn ;
 8001094:	2306      	movs	r3, #6
 8001096:	703b      	strb	r3, [r7, #0]
	NVICEXTI0_Config.NVIC_IRQChannelCmd = ENABLE;
 8001098:	2301      	movs	r3, #1
 800109a:	70fb      	strb	r3, [r7, #3]
	NVICEXTI0_Config.NVIC_IRQChannelPreemptionPriority = 0x00;
 800109c:	2300      	movs	r3, #0
 800109e:	707b      	strb	r3, [r7, #1]
	NVICEXTI0_Config.NVIC_IRQChannelSubPriority = 0x00;
 80010a0:	2300      	movs	r3, #0
 80010a2:	70bb      	strb	r3, [r7, #2]
	NVIC_Init(&NVICEXTI0_Config);
 80010a4:	463b      	mov	r3, r7
 80010a6:	4618      	mov	r0, r3
 80010a8:	f7ff f88e 	bl	80001c8 <NVIC_Init>

}
 80010ac:	bf00      	nop
 80010ae:	3710      	adds	r7, #16
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	40006400 	.word	0x40006400

080010b8 <EXTI0_IRQHandler>:

// Function for EXTI0 the Handler: // Case for  2. condition:
void EXTI0_IRQHandler(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b086      	sub	sp, #24
 80010bc:	af00      	add	r7, sp, #0
	CanTxMsg Send;
	if (EXTI_GetITStatus(EXTI_Line0) != RESET) {
 80010be:	2001      	movs	r0, #1
 80010c0:	f7ff fd20 	bl	8000b04 <EXTI_GetITStatus>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d03e      	beq.n	8001148 <EXTI0_IRQHandler+0x90>
		/* Do your stuff when PA0 is PRESSED */
		Send.IDE = CAN_Id_Standard;
 80010ca:	2300      	movs	r3, #0
 80010cc:	733b      	strb	r3, [r7, #12]
		Send.StdId = 0x27A;
 80010ce:	f240 237a 	movw	r3, #634	; 0x27a
 80010d2:	607b      	str	r3, [r7, #4]
		Send.ExtId = 0;
 80010d4:	2300      	movs	r3, #0
 80010d6:	60bb      	str	r3, [r7, #8]
		Send.DLC = 1;
 80010d8:	2301      	movs	r3, #1
 80010da:	73bb      	strb	r3, [r7, #14]
		Send.RTR = CAN_RTR_Data;
 80010dc:	2300      	movs	r3, #0
 80010de:	737b      	strb	r3, [r7, #13]

		Send.Data[0] = 00000111;
 80010e0:	2349      	movs	r3, #73	; 0x49
 80010e2:	73fb      	strb	r3, [r7, #15]
		CAN_Transmit(CAN1, &Send);
 80010e4:	1d3b      	adds	r3, r7, #4
 80010e6:	4619      	mov	r1, r3
 80010e8:	4819      	ldr	r0, [pc, #100]	; (8001150 <EXTI0_IRQHandler+0x98>)
 80010ea:	f7ff fa88 	bl	80005fe <CAN_Transmit>

		// Switch on the LED
		GPIO_WriteBit(GPIOD, GPIO_Pin_15, Bit_SET);
 80010ee:	2201      	movs	r2, #1
 80010f0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010f4:	4817      	ldr	r0, [pc, #92]	; (8001154 <EXTI0_IRQHandler+0x9c>)
 80010f6:	f7ff fdc7 	bl	8000c88 <GPIO_WriteBit>
		msDelay(500);
 80010fa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80010fe:	f7ff fed9 	bl	8000eb4 <msDelay>
		GPIO_WriteBit(GPIOD, GPIO_Pin_15, Bit_RESET);
 8001102:	2200      	movs	r2, #0
 8001104:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001108:	4812      	ldr	r0, [pc, #72]	; (8001154 <EXTI0_IRQHandler+0x9c>)
 800110a:	f7ff fdbd 	bl	8000c88 <GPIO_WriteBit>

		Send.IDE = CAN_Id_Standard;
 800110e:	2300      	movs	r3, #0
 8001110:	733b      	strb	r3, [r7, #12]
		Send.StdId = 0x37A;
 8001112:	f240 337a 	movw	r3, #890	; 0x37a
 8001116:	607b      	str	r3, [r7, #4]
		Send.ExtId = 0;
 8001118:	2300      	movs	r3, #0
 800111a:	60bb      	str	r3, [r7, #8]
		Send.DLC = 5;
 800111c:	2305      	movs	r3, #5
 800111e:	73bb      	strb	r3, [r7, #14]
		Send.RTR = CAN_RTR_Data;
 8001120:	2300      	movs	r3, #0
 8001122:	737b      	strb	r3, [r7, #13]

		Send.Data[0] = 0xFF;
 8001124:	23ff      	movs	r3, #255	; 0xff
 8001126:	73fb      	strb	r3, [r7, #15]
		Send.Data[1] = 0xFF;
 8001128:	23ff      	movs	r3, #255	; 0xff
 800112a:	743b      	strb	r3, [r7, #16]
		Send.Data[2] = 0xFF;
 800112c:	23ff      	movs	r3, #255	; 0xff
 800112e:	747b      	strb	r3, [r7, #17]
		Send.Data[3] = 0xFF;
 8001130:	23ff      	movs	r3, #255	; 0xff
 8001132:	74bb      	strb	r3, [r7, #18]
		Send.Data[4] = 0xFF;
 8001134:	23ff      	movs	r3, #255	; 0xff
 8001136:	74fb      	strb	r3, [r7, #19]
		CAN_Transmit(CAN1, &Send);
 8001138:	1d3b      	adds	r3, r7, #4
 800113a:	4619      	mov	r1, r3
 800113c:	4804      	ldr	r0, [pc, #16]	; (8001150 <EXTI0_IRQHandler+0x98>)
 800113e:	f7ff fa5e 	bl	80005fe <CAN_Transmit>

		// Clear interrupt flag
		EXTI_ClearITPendingBit(EXTI_Line0);
 8001142:	2001      	movs	r0, #1
 8001144:	f7ff fd02 	bl	8000b4c <EXTI_ClearITPendingBit>
		}
}
 8001148:	bf00      	nop
 800114a:	3718      	adds	r7, #24
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	40006400 	.word	0x40006400
 8001154:	40020c00 	.word	0x40020c00

08001158 <CAN1_RX0_IRQHandler>:

// Function for CAN1 the Handler: // Case for  1. condition:
void CAN1_RX0_IRQHandler(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b08c      	sub	sp, #48	; 0x30
 800115c:	af00      	add	r7, sp, #0
	CanRxMsg Receive;
	CanTxMsg Send;

	uint8_t counter;
	uint16_t large = 0x00;
 800115e:	2300      	movs	r3, #0
 8001160:	85bb      	strh	r3, [r7, #44]	; 0x2c

	// Getting message:
	if(SET != CAN_GetFlagStatus(CAN1, CAN_FLAG_FMP0))
 8001162:	493e      	ldr	r1, [pc, #248]	; (800125c <CAN1_RX0_IRQHandler+0x104>)
 8001164:	483e      	ldr	r0, [pc, #248]	; (8001260 <CAN1_RX0_IRQHandler+0x108>)
 8001166:	f7ff fbf4 	bl	8000952 <CAN_GetFlagStatus>
 800116a:	4603      	mov	r3, r0
 800116c:	2b01      	cmp	r3, #1
 800116e:	d170      	bne.n	8001252 <CAN1_RX0_IRQHandler+0xfa>
	{
	// Wait until status is set:
	 return;
	}

	CAN_Receive(CAN1, CAN_FIFO0, &Receive);
 8001170:	f107 0318 	add.w	r3, r7, #24
 8001174:	461a      	mov	r2, r3
 8001176:	2100      	movs	r1, #0
 8001178:	4839      	ldr	r0, [pc, #228]	; (8001260 <CAN1_RX0_IRQHandler+0x108>)
 800117a:	f7ff fb0e 	bl	800079a <CAN_Receive>
	GPIO_ToggleBits(GPIOD, GPIO_Pin_12);
 800117e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001182:	4838      	ldr	r0, [pc, #224]	; (8001264 <CAN1_RX0_IRQHandler+0x10c>)
 8001184:	f7ff fd98 	bl	8000cb8 <GPIO_ToggleBits>
	msDelay(500);
 8001188:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800118c:	f7ff fe92 	bl	8000eb4 <msDelay>
	if( Receive.StdId== 0x42)
 8001190:	69bb      	ldr	r3, [r7, #24]
 8001192:	2b42      	cmp	r3, #66	; 0x42
 8001194:	d145      	bne.n	8001222 <CAN1_RX0_IRQHandler+0xca>
	{
			// receiving message:
			Send.IDE = CAN_Id_Standard;
 8001196:	2300      	movs	r3, #0
 8001198:	733b      	strb	r3, [r7, #12]
			Send.StdId = 0x17A;
 800119a:	f44f 73bd 	mov.w	r3, #378	; 0x17a
 800119e:	607b      	str	r3, [r7, #4]
			Send.ExtId = 0;
 80011a0:	2300      	movs	r3, #0
 80011a2:	60bb      	str	r3, [r7, #8]
			Send.DLC = 1;
 80011a4:	2301      	movs	r3, #1
 80011a6:	73bb      	strb	r3, [r7, #14]
			Send.RTR = CAN_RTR_Data;
 80011a8:	2300      	movs	r3, #0
 80011aa:	737b      	strb	r3, [r7, #13]

			/// Find the largest byte in the message:
			for(counter = 0; counter< Receive.DLC; counter++)
 80011ac:	2300      	movs	r3, #0
 80011ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80011b2:	e017      	b.n	80011e4 <CAN1_RX0_IRQHandler+0x8c>
			{
				if (Receive.Data[counter]> large)
 80011b4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80011b8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80011bc:	4413      	add	r3, r2
 80011be:	f813 3c0d 	ldrb.w	r3, [r3, #-13]
 80011c2:	b29b      	uxth	r3, r3
 80011c4:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80011c6:	429a      	cmp	r2, r3
 80011c8:	d207      	bcs.n	80011da <CAN1_RX0_IRQHandler+0x82>
				{
					large = Receive.Data[counter];
 80011ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80011ce:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80011d2:	4413      	add	r3, r2
 80011d4:	f813 3c0d 	ldrb.w	r3, [r3, #-13]
 80011d8:	85bb      	strh	r3, [r7, #44]	; 0x2c
			for(counter = 0; counter< Receive.DLC; counter++)
 80011da:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80011de:	3301      	adds	r3, #1
 80011e0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80011e4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80011e8:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80011ec:	429a      	cmp	r2, r3
 80011ee:	d3e1      	bcc.n	80011b4 <CAN1_RX0_IRQHandler+0x5c>
				}
			}
	           //Send the message
			Send.Data[0] = large;
 80011f0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80011f2:	b2db      	uxtb	r3, r3
 80011f4:	73fb      	strb	r3, [r7, #15]
			CAN_Transmit(CAN1, &Send);
 80011f6:	1d3b      	adds	r3, r7, #4
 80011f8:	4619      	mov	r1, r3
 80011fa:	4819      	ldr	r0, [pc, #100]	; (8001260 <CAN1_RX0_IRQHandler+0x108>)
 80011fc:	f7ff f9ff 	bl	80005fe <CAN_Transmit>
            // Switch on the LED
			GPIO_WriteBit(GPIOD, GPIO_Pin_13, Bit_SET);
 8001200:	2201      	movs	r2, #1
 8001202:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001206:	4817      	ldr	r0, [pc, #92]	; (8001264 <CAN1_RX0_IRQHandler+0x10c>)
 8001208:	f7ff fd3e 	bl	8000c88 <GPIO_WriteBit>
			msDelay(500);
 800120c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001210:	f7ff fe50 	bl	8000eb4 <msDelay>
			GPIO_WriteBit(GPIOD, GPIO_Pin_13, Bit_RESET);
 8001214:	2200      	movs	r2, #0
 8001216:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800121a:	4812      	ldr	r0, [pc, #72]	; (8001264 <CAN1_RX0_IRQHandler+0x10c>)
 800121c:	f7ff fd34 	bl	8000c88 <GPIO_WriteBit>
 8001220:	e018      	b.n	8001254 <CAN1_RX0_IRQHandler+0xfc>

	}
	else
	{
			Send.IDE = CAN_Id_Standard;
 8001222:	2300      	movs	r3, #0
 8001224:	733b      	strb	r3, [r7, #12]
			Send.StdId = 0x42;
 8001226:	2342      	movs	r3, #66	; 0x42
 8001228:	607b      	str	r3, [r7, #4]
			Send.ExtId = 0;
 800122a:	2300      	movs	r3, #0
 800122c:	60bb      	str	r3, [r7, #8]
			Send.DLC = 4;
 800122e:	2304      	movs	r3, #4
 8001230:	73bb      	strb	r3, [r7, #14]
			Send.RTR = CAN_RTR_Data;
 8001232:	2300      	movs	r3, #0
 8001234:	737b      	strb	r3, [r7, #13]

			Send.Data[0] = 0x007;
 8001236:	2307      	movs	r3, #7
 8001238:	73fb      	strb	r3, [r7, #15]
			Send.Data[1] = 0x049;
 800123a:	2349      	movs	r3, #73	; 0x49
 800123c:	743b      	strb	r3, [r7, #16]
			Send.Data[2] = 0x015;
 800123e:	2315      	movs	r3, #21
 8001240:	747b      	strb	r3, [r7, #17]
			Send.Data[3] = 0x0BA;
 8001242:	23ba      	movs	r3, #186	; 0xba
 8001244:	74bb      	strb	r3, [r7, #18]
			CAN_Transmit(CAN1,&Send);
 8001246:	1d3b      	adds	r3, r7, #4
 8001248:	4619      	mov	r1, r3
 800124a:	4805      	ldr	r0, [pc, #20]	; (8001260 <CAN1_RX0_IRQHandler+0x108>)
 800124c:	f7ff f9d7 	bl	80005fe <CAN_Transmit>
 8001250:	e000      	b.n	8001254 <CAN1_RX0_IRQHandler+0xfc>
	 return;
 8001252:	bf00      	nop
}

}
 8001254:	3730      	adds	r7, #48	; 0x30
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	12000003 	.word	0x12000003
 8001260:	40006400 	.word	0x40006400
 8001264:	40020c00 	.word	0x40020c00

08001268 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001268:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012a0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800126c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800126e:	e003      	b.n	8001278 <LoopCopyDataInit>

08001270 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001270:	4b0c      	ldr	r3, [pc, #48]	; (80012a4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001272:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001274:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001276:	3104      	adds	r1, #4

08001278 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001278:	480b      	ldr	r0, [pc, #44]	; (80012a8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800127a:	4b0c      	ldr	r3, [pc, #48]	; (80012ac <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800127c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800127e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001280:	d3f6      	bcc.n	8001270 <CopyDataInit>
  ldr  r2, =_sbss
 8001282:	4a0b      	ldr	r2, [pc, #44]	; (80012b0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001284:	e002      	b.n	800128c <LoopFillZerobss>

08001286 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001286:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001288:	f842 3b04 	str.w	r3, [r2], #4

0800128c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800128c:	4b09      	ldr	r3, [pc, #36]	; (80012b4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800128e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001290:	d3f9      	bcc.n	8001286 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001292:	f000 f841 	bl	8001318 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001296:	f000 f8ef 	bl	8001478 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800129a:	f7ff fe23 	bl	8000ee4 <main>
  bx  lr    
 800129e:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80012a0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80012a4:	080014e0 	.word	0x080014e0
  ldr  r0, =_sdata
 80012a8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80012ac:	20000000 	.word	0x20000000
  ldr  r2, =_sbss
 80012b0:	20000000 	.word	0x20000000
  ldr  r3, = _ebss
 80012b4:	2000001c 	.word	0x2000001c

080012b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012b8:	e7fe      	b.n	80012b8 <ADC_IRQHandler>

080012ba <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80012ba:	b480      	push	{r7}
 80012bc:	af00      	add	r7, sp, #0
}
 80012be:	bf00      	nop
 80012c0:	46bd      	mov	sp, r7
 80012c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c6:	4770      	bx	lr

080012c8 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80012cc:	e7fe      	b.n	80012cc <HardFault_Handler+0x4>

080012ce <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80012ce:	b480      	push	{r7}
 80012d0:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80012d2:	e7fe      	b.n	80012d2 <MemManage_Handler+0x4>

080012d4 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80012d8:	e7fe      	b.n	80012d8 <BusFault_Handler+0x4>

080012da <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80012da:	b480      	push	{r7}
 80012dc:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80012de:	e7fe      	b.n	80012de <UsageFault_Handler+0x4>

080012e0 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
}
 80012e4:	bf00      	nop
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr

080012ee <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80012ee:	b480      	push	{r7}
 80012f0:	af00      	add	r7, sp, #0
}
 80012f2:	bf00      	nop
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr

080012fc <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
}
 8001300:	bf00      	nop
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr

0800130a <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 800130a:	b480      	push	{r7}
 800130c:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
}
 800130e:	bf00      	nop
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr

08001318 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800131c:	4a16      	ldr	r2, [pc, #88]	; (8001378 <SystemInit+0x60>)
 800131e:	4b16      	ldr	r3, [pc, #88]	; (8001378 <SystemInit+0x60>)
 8001320:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001324:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001328:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800132c:	4a13      	ldr	r2, [pc, #76]	; (800137c <SystemInit+0x64>)
 800132e:	4b13      	ldr	r3, [pc, #76]	; (800137c <SystemInit+0x64>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f043 0301 	orr.w	r3, r3, #1
 8001336:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001338:	4b10      	ldr	r3, [pc, #64]	; (800137c <SystemInit+0x64>)
 800133a:	2200      	movs	r2, #0
 800133c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800133e:	4a0f      	ldr	r2, [pc, #60]	; (800137c <SystemInit+0x64>)
 8001340:	4b0e      	ldr	r3, [pc, #56]	; (800137c <SystemInit+0x64>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001348:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800134c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800134e:	4b0b      	ldr	r3, [pc, #44]	; (800137c <SystemInit+0x64>)
 8001350:	4a0b      	ldr	r2, [pc, #44]	; (8001380 <SystemInit+0x68>)
 8001352:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001354:	4a09      	ldr	r2, [pc, #36]	; (800137c <SystemInit+0x64>)
 8001356:	4b09      	ldr	r3, [pc, #36]	; (800137c <SystemInit+0x64>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800135e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001360:	4b06      	ldr	r3, [pc, #24]	; (800137c <SystemInit+0x64>)
 8001362:	2200      	movs	r2, #0
 8001364:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8001366:	f000 f80d 	bl	8001384 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800136a:	4b03      	ldr	r3, [pc, #12]	; (8001378 <SystemInit+0x60>)
 800136c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001370:	609a      	str	r2, [r3, #8]
#endif
}
 8001372:	bf00      	nop
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	e000ed00 	.word	0xe000ed00
 800137c:	40023800 	.word	0x40023800
 8001380:	24003010 	.word	0x24003010

08001384 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8001384:	b480      	push	{r7}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800138a:	2300      	movs	r3, #0
 800138c:	607b      	str	r3, [r7, #4]
 800138e:	2300      	movs	r3, #0
 8001390:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8001392:	4a35      	ldr	r2, [pc, #212]	; (8001468 <SetSysClock+0xe4>)
 8001394:	4b34      	ldr	r3, [pc, #208]	; (8001468 <SetSysClock+0xe4>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800139c:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800139e:	4b32      	ldr	r3, [pc, #200]	; (8001468 <SetSysClock+0xe4>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013a6:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	3301      	adds	r3, #1
 80013ac:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d103      	bne.n	80013bc <SetSysClock+0x38>
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80013ba:	d1f0      	bne.n	800139e <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80013bc:	4b2a      	ldr	r3, [pc, #168]	; (8001468 <SetSysClock+0xe4>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d002      	beq.n	80013ce <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 80013c8:	2301      	movs	r3, #1
 80013ca:	603b      	str	r3, [r7, #0]
 80013cc:	e001      	b.n	80013d2 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80013ce:	2300      	movs	r3, #0
 80013d0:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	2b01      	cmp	r3, #1
 80013d6:	d140      	bne.n	800145a <SetSysClock+0xd6>
  {
    /* Select regulator voltage output Scale 2 mode, System frequency up to 144 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80013d8:	4a23      	ldr	r2, [pc, #140]	; (8001468 <SetSysClock+0xe4>)
 80013da:	4b23      	ldr	r3, [pc, #140]	; (8001468 <SetSysClock+0xe4>)
 80013dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013e2:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR &= (uint32_t)~(PWR_CR_VOS);
 80013e4:	4a21      	ldr	r2, [pc, #132]	; (800146c <SetSysClock+0xe8>)
 80013e6:	4b21      	ldr	r3, [pc, #132]	; (800146c <SetSysClock+0xe8>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80013ee:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 80013f0:	4a1d      	ldr	r2, [pc, #116]	; (8001468 <SetSysClock+0xe4>)
 80013f2:	4b1d      	ldr	r3, [pc, #116]	; (8001468 <SetSysClock+0xe4>)
 80013f4:	689b      	ldr	r3, [r3, #8]
 80013f6:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 1*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV1;
 80013f8:	4a1b      	ldr	r2, [pc, #108]	; (8001468 <SetSysClock+0xe4>)
 80013fa:	4b1b      	ldr	r3, [pc, #108]	; (8001468 <SetSysClock+0xe4>)
 80013fc:	689b      	ldr	r3, [r3, #8]
 80013fe:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
 8001400:	4a19      	ldr	r2, [pc, #100]	; (8001468 <SetSysClock+0xe4>)
 8001402:	4b19      	ldr	r3, [pc, #100]	; (8001468 <SetSysClock+0xe4>)
 8001404:	689b      	ldr	r3, [r3, #8]
 8001406:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800140a:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 800140c:	4b16      	ldr	r3, [pc, #88]	; (8001468 <SetSysClock+0xe4>)
 800140e:	4a18      	ldr	r2, [pc, #96]	; (8001470 <SetSysClock+0xec>)
 8001410:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8001412:	4a15      	ldr	r2, [pc, #84]	; (8001468 <SetSysClock+0xe4>)
 8001414:	4b14      	ldr	r3, [pc, #80]	; (8001468 <SetSysClock+0xe4>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800141c:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800141e:	bf00      	nop
 8001420:	4b11      	ldr	r3, [pc, #68]	; (8001468 <SetSysClock+0xe4>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001428:	2b00      	cmp	r3, #0
 800142a:	d0f9      	beq.n	8001420 <SetSysClock+0x9c>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_2WS;
 800142c:	4b11      	ldr	r3, [pc, #68]	; (8001474 <SetSysClock+0xf0>)
 800142e:	f240 6202 	movw	r2, #1538	; 0x602
 8001432:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8001434:	4a0c      	ldr	r2, [pc, #48]	; (8001468 <SetSysClock+0xe4>)
 8001436:	4b0c      	ldr	r3, [pc, #48]	; (8001468 <SetSysClock+0xe4>)
 8001438:	689b      	ldr	r3, [r3, #8]
 800143a:	f023 0303 	bic.w	r3, r3, #3
 800143e:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8001440:	4a09      	ldr	r2, [pc, #36]	; (8001468 <SetSysClock+0xe4>)
 8001442:	4b09      	ldr	r3, [pc, #36]	; (8001468 <SetSysClock+0xe4>)
 8001444:	689b      	ldr	r3, [r3, #8]
 8001446:	f043 0302 	orr.w	r3, r3, #2
 800144a:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL)
 800144c:	bf00      	nop
 800144e:	4b06      	ldr	r3, [pc, #24]	; (8001468 <SetSysClock+0xe4>)
 8001450:	689b      	ldr	r3, [r3, #8]
 8001452:	f003 030c 	and.w	r3, r3, #12
 8001456:	2b08      	cmp	r3, #8
 8001458:	d1f9      	bne.n	800144e <SetSysClock+0xca>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 800145a:	bf00      	nop
 800145c:	370c      	adds	r7, #12
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr
 8001466:	bf00      	nop
 8001468:	40023800 	.word	0x40023800
 800146c:	40007000 	.word	0x40007000
 8001470:	09423604 	.word	0x09423604
 8001474:	40023c00 	.word	0x40023c00

08001478 <__libc_init_array>:
 8001478:	b570      	push	{r4, r5, r6, lr}
 800147a:	4e0d      	ldr	r6, [pc, #52]	; (80014b0 <__libc_init_array+0x38>)
 800147c:	4c0d      	ldr	r4, [pc, #52]	; (80014b4 <__libc_init_array+0x3c>)
 800147e:	1ba4      	subs	r4, r4, r6
 8001480:	10a4      	asrs	r4, r4, #2
 8001482:	2500      	movs	r5, #0
 8001484:	42a5      	cmp	r5, r4
 8001486:	d109      	bne.n	800149c <__libc_init_array+0x24>
 8001488:	4e0b      	ldr	r6, [pc, #44]	; (80014b8 <__libc_init_array+0x40>)
 800148a:	4c0c      	ldr	r4, [pc, #48]	; (80014bc <__libc_init_array+0x44>)
 800148c:	f000 f818 	bl	80014c0 <_init>
 8001490:	1ba4      	subs	r4, r4, r6
 8001492:	10a4      	asrs	r4, r4, #2
 8001494:	2500      	movs	r5, #0
 8001496:	42a5      	cmp	r5, r4
 8001498:	d105      	bne.n	80014a6 <__libc_init_array+0x2e>
 800149a:	bd70      	pop	{r4, r5, r6, pc}
 800149c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80014a0:	4798      	blx	r3
 80014a2:	3501      	adds	r5, #1
 80014a4:	e7ee      	b.n	8001484 <__libc_init_array+0xc>
 80014a6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80014aa:	4798      	blx	r3
 80014ac:	3501      	adds	r5, #1
 80014ae:	e7f2      	b.n	8001496 <__libc_init_array+0x1e>
 80014b0:	080014d8 	.word	0x080014d8
 80014b4:	080014d8 	.word	0x080014d8
 80014b8:	080014d8 	.word	0x080014d8
 80014bc:	080014dc 	.word	0x080014dc

080014c0 <_init>:
 80014c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014c2:	bf00      	nop
 80014c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80014c6:	bc08      	pop	{r3}
 80014c8:	469e      	mov	lr, r3
 80014ca:	4770      	bx	lr

080014cc <_fini>:
 80014cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014ce:	bf00      	nop
 80014d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80014d2:	bc08      	pop	{r3}
 80014d4:	469e      	mov	lr, r3
 80014d6:	4770      	bx	lr
